+STARTUP: showall indent
#+OPTIONS: toc:nil num:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [8pt,a4paper]

# pour commit via magit
# ctrl x g
# s : sélection des fichiers à commiter
# c c : commiter
# ctrl c c : valider le msg de commit
# P u : push
# tab : uncollapse
# q : quitter magit


* conda

(base) [thai@ci640 python]$ conda env list
(base) [thai@ci640 formation]$ python --version
(base) [thai@ci640 formation]$ conda create -n formation python=3.8
(base) [thai@ci640 formation]$ conda activate formation

* généralité
|-----------------------+-----------------------------------------------------------------------|
| # comments            | commentaire simple                                                    |
| """ ou '''            | commentaires multiligne                                               |
| None                  | objet de type NoneType                                                |
| pass                  | permet de "passer" une fonction/loop/class etc. non encore implémenté |
|                       |                                                                       |



* arithmetic
|      10%3 | vaut 1 (modulo ~ "remainder") |
| int / int | retourne un float        |


* indexing et slicing
| i[0]          | premier caractère                 |
| i[-1]         | dernier caractère                 |
| i[0:4]        | 4 *non inclus*                    |
| i[0:7:2]      | step = 2 => tous les 2 caractères |
| i[:3] + i[3:] | équivaut à  i[:] et  i            |
| i[0:3]        | équivaut i[:3]                    |

* string methods 
| .upper()                         |                                                          |
| .lower()                         |                                                          |
| .capitalize()                    | première lettre en majuscule et les autres en minuscules |
| .isdigit()                       | bool : vérifie si c'est un nombre                        |
| .isalnum()                       | bool : nombre et lettre                                  |
| .startswith(x)                   |                                                          |
| .startswith(x, 1)                | à partir de l'index 1                                    |
| .endswith(x)                     |                                                          |
| .endswith(x, 2)                  |                                                          |
| "abc {0} {1}".format("de", "fg") | "abc de fg"                                              |
| .split(" ") ~ .split()           | retourne un []                                           |
| "-".join([])                     | retourne un str                                          |
| .strip()                         | enlève les espaces devant et en fin                      |


* string = immutable
# TypeError: 'str' object does not support item assignment
# solution => créer une autre string

| "azert"[0]="e" | erreur |

* fonctions natives
| len(x)                                 | longueur de la str ou list x             |
| type(x)                                | class int                                |
| str(x)                                 |                                          |
| int(x)                                 |                                          |
| float(x)                               |                                          |
| bool(x)                                | True False                               |
| tuple(x)                               | converti en ()                           |
| list(x)                                | converti en []                           |
| dict(x)                                | converti un 'zip' en {}                  |
| sum(x)                                 | somme ex. sum(1,2,5)                     |
| range(x)                               | loop 0 à x non inclus ex.range(-2) => [] |
| range(start, end non inclus, step)     |                                          |
| min([])                                | minimum (alpha ou num)                   |
| max([])                                | maximum (alpha ou num)                   |
| name = input("Name: ")                 | input interactif retourne un str         |
|----------------------------------------+------------------------------------------|
| zip(*args)                             |                                          |
| list(zip(x,y))         x=[a,b] y=[1,2] | liste de tuple (a,1) (b,2)               |
|----------------------------------------+------------------------------------------|
| list(enumerate(x))     x=[a,b,c]       | liste de tuple (0,a) (1,b) (2,c) etc.    |
|----------------------------------------+------------------------------------------|
| isinstance(x, int)                     | teste si x est de type int               |


** consommable 1 seule fois : zip(*args) enumerate reversed filter map
z = zip(x,y)
list(z) sort une liste de tuple la première fois
list(z) la deuxième fois est vide car zip consommée

si zip(x,y) avec x et y de taille différente, les premiers objets sont mappés et les autres ignorés



#+begin_src python :session :results output
"""
exemple de conversion
"""

for letter in list("hello"):
    print(letter, end="")

for num in range(1,5):
    print(num, end="")

      
x = [1,2]
y = ['a','b']
z = zip(x,y)
print(list(z))  # Output: [(1, 4), (2, 5), (3, 6)]
print(list(z))  # Output: [] car zip consommable 1 seule fois

#+end_src

#+RESULTS:
: hello1234[(1, 'a'), (2, 'b')]
: []


* list = mutable
ex. [1,2,3,4]

| .pop()                 | enlève le dernier et retourne |
| .pop(i)                | enlève à l'index et retourne  |
| .append("hello")       | à la fin                      |
| .insert(index, "hello) | insère à l'index              |
| .index('c')            | position de 'c'               |
| .count('c')            | nb de fois où 'c' apparait    |
| .clear()               | empty                         |


# TypeError: '<' not supported between instances of 'int' and 'str'
| .sort()     | tous les objets doivent etre du mm type sinon erreur ; retourne None |
| .reverse()  |                                                                      |
| [:]         | slice comme sur les str                                              |
| [0]         | premier élément                                                      |
| [-1]        | dernier élément                                                      |
| z = x + y   | merge 2 listes dans z (x et y doivent etre de type list)             |
| x.append(y) | merge y dans x                                                       |


** nested list
x = ['a', 'b', ["hello","world"]]
x[2][1] == "world"


* tuple = immutable
# TypeError: 'tuple' object does not support item assignment
ex. (1,2,3,4)

** MAIS nested list dans un tuple est mutable
| (1,2,3,['a','b']) | on peut changer les éléments dans ['a','b'] |
| .count(x)         | retourne le nb d'occurence de x             |
| [:]               | slice et retourne un tuple                  |


* dictionary = mutable, non sortable
ex. d = {'k1' : 'value1', 'k2' : 'value2'}

| d['k1']              | retourne 'value1'                     |
| .get('k1')           | retourne 'value1'                     |
| .keys()              | retourne un dict_keys                 |
| .values()            | retourne un dict_values               |
| .pop(x)              | enlève la key value et retourne value |
| .clear()             | empty                                 |
| d[x] = y             | ajoute une key value                  |
| .items()             | retourne liste de tuple [(), ()]      |
| .update({'k1' : 30}) | ~ d['k1'] = 30                        |



* operators : retourne un bool
| 5 == 5.0              | True                   |
| 5 <  10               | True                   |
| 5 <= 5                | True                   |
| 5 != 6                | True                   |
| '5' != 5              | True                   |
| or                    | ~ +                    |
| and                   | ~ x                    |
| not                   | ex. not True est False |
| 'a' in ['a', 'b']     | True                   |
| 'a' in {'a':1}        | True                   |
| 1 in {'a':1}.values() | True                   |
| {}.get(1) is None     | True                   |
| {}.get(1) is not None | False                  |



* fonctions
| help(x)  | description et arguments de la fonction x ex. print |
| *args    | nb illimité d'arguments  => type tuple              |
| **kwargs | nb illimité de clef valeurs => type dictionnaire    |



# l'ordre a une importance : il faut définir la fonction avant de l'appeler
# on peut mettre une valeur par défaut dans les arguments
# on peut imbriquer des fonctions (def sous un def)

#+begin_src python :session :results output
"""
exemple de fonctions
"""
def greet_person():
    return "hello"

def greet_person(name = "john"):
    return "hello "+ str(name)

def myargs(*args):
    return args

def mykwargs(**kwargs):
    return kwargs

def nested_function():
    myage = 10
    def get_age(age):
        print(age)
    get_age(myage)

print(greet_person())
print(greet_person("bob"))
print(type(myargs(1,2,3)))
print(type(mykwargs(name="joe", age=46)))
nested_function()
#+end_src

#+RESULTS:
: hello john
: hello bob
: <class 'tuple'>
: <class 'dict'>
: 10


* scope des variables
# dans une fonction les variables ont une portée locale
# pour utiliser une variable globale => rappeler la variable "global"

#+begin_src python :session :results output
"""
variable globale
"""
myvar = 100
def incr():
    global myvar
    myvar = 10

print(myvar)
incr()
print(myvar)
#+end_src

#+RESULTS:
: 100
: 10


* control flow
|--------------------+-----------------|
| pass               | ~ ne fait rien  |
|--------------------+-----------------|
| if ():             |                 |
| elif ():           |                 |
| else:              |                 |
|--------------------+-----------------|
| for i in () [] "": |                 |
| break              | ~ exit          |
| continue           | ~ skip          |
|--------------------+-----------------|
| while ():          |                 |
| else:              | exec en dernier |
|                    |                 |


#+begin_src python :session :results output
"""
conditions
"""
animal = "bird"
if animal == "cow":
    print("eats grass")
elif animal == "bird":
    print("eats seeds")
else:
    print("we don't know what the animal eats")

for i in "not yet implemeted":
    pass

x = 0
while x<10:
    print(x, end="")
    x += 1
else:
    print("!")
#+end_src

#+RESULTS:
: eats seeds
: 0123456789!


* boucler sur un dictionnaire ou list
|-----------------------------+------------------------------------------------------|
| for i in {}:                | (équivalent) i est la key                            |
| for i in {}.keys():         |                                                      |
|-----------------------------+------------------------------------------------------|
| for i in {}.values():       | i est la value                                       |
|-----------------------------+------------------------------------------------------|
| for (i,j) in [(a,b),(c,d)]: | boucler sur une liste de tuple via unpacking         |
| for (i,j) in {}.items():    | transforme le dictionnaire avec {}.items =>  [(),()] |
|                             |                                                      |


#+begin_src python :session :results output
"""
unpacking
"""

employees_dict = {'tom':20, 'joe': 25}
employees_list = [('carl',21), ('max',26)]

for (name, age) in employees_dict.items():
   print(str(name) + "->" + str(age))

for (name, age) in employees_list:
   print(str(name) + "->" + str(age))

#+end_src

#+RESULTS:
: tom->20
: joe->25
: carl->21
: max->26

  
* module random
#+begin_src python :session :results output
from random import randint, shuffle

print(randint(0, 1000))

s = list(range(0,11))
shuffle(s)
print(s)
#+end_src

#+RESULTS:
: 476
: [2, 6, 7, 5, 1, 9, 4, 0, 3, 8, 10]

* programmation objet

| class Vehicle:                                | déclaration d'une classe                                                    |
| color = "black"                               | variable de classe                                                          |
| def __init__(self):                           | constructeur                                                                |
| def __init__(self, model, company):           | autre constructeur                                                          |
| def get_color(self):                          | toujours mettre self pour pouvoir accéder à l'objet instancié               |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| class Truck(Vehicle):                         | herite des methodes et constructeurs                                        |
| class Car(Vehicle):                           |                                                                             |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| from folder.python_file import Vehicle, Truck | permet d'importer les classes Vehicle et Truck de <folder>/<python_file.py> |
|                                               | on peut aussi importer des classes ou des fonctions                         |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| Vehicle.color = "red"                         | python l'autorise mais mauvaise pratique => affecte tous les objets         |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| car = Car("jeep", "toyota")                   |                                                                             |
| car.color = "red"                             | affecte seulement l'objet car                                               |
| car.engine = "v6"                             | python l'autorise mais mauvaise pratique                                    |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| for v in [car,truck]:                         | polymorphisme                                                               |
| print(v.drive())                              |                                                                             |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| def drive(self):                              | ~ méthode abstraite : méthode à définir chez les enfants                    |
| raise NotImplementedError("To implement")     |                                                                             |
|-----------------------------------------------+-----------------------------------------------------------------------------|
|                                               | dunder = double under = __                                                  |
| def __init__(self):                           | constructeur                                                                |
| def __str__(self):                            | permet de print(x)                                                          |
| def __len__(self):                            | permet de len(x)                                                            |
|-----------------------------------------------+-----------------------------------------------------------------------------|
| Vehicle.__init__(self)                        | appel explicite au constructeur parent                                      |


#+begin_src python :session :results output
class Vehicle:
    color = "black"
    counter = 0
    
    def __init__(self, model, company):
        self.model = model
        self.company = company
        Vehicle.counter += 1

    def drive(self):
        raise NotImplementedError("Child class should be implementing this")

    def __str__(self):
        return "Vehicle " + self.model + " from " + self.company

    def __len__(self):
        return Vehicle.counter
    
class Car(Vehicle):
    def drive(self):
        return "car driving"
    
class Truck(Vehicle):
    def drive(self):
        return "truck driving"  

class Custom(Vehicle):
    def __init__(self):
        Vehicle.__init__(self, "Custom", "DIY") # appel au constructeur parent
    def drive(self):
        return "custom is driving"
    
car = Car("jeep", "Toyota")
truck = Truck("Big Rig", "Mercedes")
custom = Custom()

for v in [car,truck,custom]:
    print(v.drive())

Vehicle.color = "red" # mauvaise pratique

car.color = "purple"
car.engine = "v6" # mauvaise pratique

print(car)
print(car.color)
print(truck.color)
print(Vehicle.counter)
print(len(car))
#+end_src

#+RESULTS:
: car driving
: truck driving
: custom is driving
: Vehicle jeep from Toyota
: purple
: red
: 3
: 3

* package et module : from <package> import <module/classe/fonction>
# pour pouvoir importer un module, il faut transformer en package via des fichiers __init__.py


| package                                             | ~ répertoire                                 |
| module                                              | ~ fichier .py                                |
|-----------------------------------------------------+----------------------------------------------|
| from <package>.<module> import MyClass, my_function | import de classe ou fonction                 |
|-----------------------------------------------------+----------------------------------------------|
| from <package> import <module>                      | import de module                             |
| <module>.my_function(x)                             |                                              |
|-----------------------------------------------------+----------------------------------------------|
| pip install pandas                                  | python package installer                     |
| pip list                                            |                                              |
| pip show pandas                                     | Location: indique où se trouve site-packages |
|-----------------------------------------------------+----------------------------------------------|
| fichier :__init__.py                                | transforme un répertoire en package python   |
|                                                     | doit être présent ds ts les rép / ss-rép     |

# exemple import de classe  
|-------------------------------------------------------------------------|
| avec import de classe                                                   |
|-------------------------------------------------------------------------|
| from machine.vehicle_stuff import Car, Truck, Motorcycle                |
| from machine.tools.utils import ListAndCharShortner, DictionaryShortner |
| car = Car('jeep', 'toyota')                                             |
|-------------------------------------------------------------------------|


# exemple import de module (besoin de __init__.py)  
|--------------------------------------------------+---------------------|
| avec import de module                            |                     |
|--------------------------------------------------+---------------------|
| from machine import vehicle_stuff                | execute:__init__.py |
| from machine.tools import utils                  | execute:__init__.py |
| car = vehicle_stuff.Car('jeep', 'toyota')        |                     |
|--------------------------------------------------+---------------------|
| import machine.vehicle_stuff                     | execute:__init__.py |
| import machine.tools.utils                       | execute:__init__.py |
| car =  machine.tools.utils.Car('jeep', 'toyota') |                     |


* execution de script

| #!/usr/bin/env python      | shebang                                                  |
| if __name__ == '__main__': | définit un main et évite d'être invoqué lors d'un import |
|----------------------------+----------------------------------------------------------|
| __name__                   | vaut __main__ si invoqué directement                  |
|                            | vaut <package>.<module> si importé                       |
|                            |                                                          |


* gestion des erreurs

| raise NotImplementedError("Child class should implementing this") | ~ méthode ou fonction abstraite |
|-------------------------------------------------------------------+---------------------------------|
| try:                                                              |                                 |
| except:                                                           |                                 |
|-------------------------------------------------------------------+---------------------------------|
| isinstance(x, int)                                                | teste si x est de type int      |


#+begin_src python :session :results output
a = 1
b = '1'

for v in [a,b]:
    print(isinstance(v, int))
#+end_src

#+RESULTS:
: True
: False


* file io

** méthode 1 : ouverture et fermeture manuelle

| myfile = open(/path/to/file/)     | ouverture du fichier                         |
|-----------------------------------+----------------------------------------------|
| content = myfile.read()           | lecture du fichier 1 fois (curseur à la fin) |
| myfile.seek(0)                    | repositionner le curseur au début            |
|-----------------------------------+----------------------------------------------|
| content_list = myfile.readlines() | retourne un [] pour chaque ligne             |
|                                   | contient les \n pour chaque item             |
|-----------------------------------+----------------------------------------------|
| myfile.close()                    | fermeture                                    |


** méthode 2 : ouverture et fermeture automatique

| with open(/path/to/file/) as myfile:           | mode 'r' = read (default)  |
| content = myfile.read()                        |                            |
|------------------------------------------------+----------------------------|
| with open(/path/to/file/, mode='a') as myfile: |                            |
| myfile.write("\nhello world")                  |                            |
|------------------------------------------------+----------------------------|
| with open("img.bmp", mode='r+b') as myfile:    | overwrite/read et binary   |
|------------------------------------------------+----------------------------|
| mode 'r'                                       | read only (défaut)         |
| mode 'a'                                       | append (à la fin)          |
| mode 'w'                                       | new file puis write        |
| mode 'r+'                                      | overwrite / read           |
| mode 'w+'                                      | new file puis write / read |
|------------------------------------------------+----------------------------|
| mode 'rb' 'ab' 'wb' 'r+b' 'w+b'                | binary file                |
| mode 'rt' 'at' 'wt' 'r+t' 'w+t'                | text file (défault)        |


#+begin_src python :session :results output
with open("/tmp/sample.txt", mode="w") as myfile:
    myfile.write("hello world") 
    
with open("/tmp/sample.txt", mode="w") as myfile:
    myfile.write("joe bar") # write new file (dont keep "hello world")
    
with open("/tmp/sample.txt") as myfile:
    print(myfile.read())

with open("/tmp/sample.txt", mode="r+") as myfile:
    myfile.write("nem") # overwrite on "joe bar"
    myfile.seek(0)
    print(myfile.read())

with open("/tmp/sample.txt", mode="w+") as myfile:
    myfile.write("nemo") # write a new file, dont keep "new bar"
    myfile.seek(0)
    print(myfile.read())    

#+end_src

#+RESULTS:
: joe bar
: nem bar
: nemo
