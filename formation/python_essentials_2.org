#+OPTIONS: toc:nil num:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [8pt,a4paper]


#+TITLE: Python essential 2 sur skillforall.com

* modules, packages, and pip

# tous les modules python standard :
# https://docs.python.org/3/py-modindex.html


| import math                             |                                                                      |
| import sys                              |                                                                      |
|-----------------------------------------+----------------------------------------------------------------------|
| import math, sys                        | importation de module sur une seule ligne                            |
|-----------------------------------------+----------------------------------------------------------------------|
| import math                             |                                                                      |
| math.pi                                 | 3.141592653589793                                                    |
|-----------------------------------------+----------------------------------------------------------------------|
| import math as m                        | alias                                                                |
| math.pi                                 | *NameError*                                                          |
| m.pi                                    | 3.141592653589793                                                    |
| dir(m)                                  | toutes les fn & const possibles [...  pi, 'sinh', 'sqrt', 'tan' ...] |
|-----------------------------------------+----------------------------------------------------------------------|
| from math import pi                     | seulement pi est importé                                             |
| math.pi                                 | *NameError* name 'math' is not defined                              |
| pi                                      | 3.141592653589793                                                    |
| pi = "hello"                            | "hello"                                                              |
|-----------------------------------------+----------------------------------------------------------------------|
| from math import pi as PI               |                                                                      |
| pi                                      | *NameError*                                                          |
| PI                                      | 3.141592653589793                                                    |
|-----------------------------------------+----------------------------------------------------------------------|
| from math import pi as pie, sin as sine |                                                                      |
| pie                                     | 3.141592653589793                                                    |
| sine(pie/2)                             | 1.0                                                                  |
|-----------------------------------------+----------------------------------------------------------------------|
| from math import *                      |                                                                      |
| sin(pi/2)                               | 1.0                                                                  |
|-----------------------------------------+----------------------------------------------------------------------|
| import math                             |                                                                      |
| dir(math)                               | toutes les fn & const possibles [...  pi, 'sinh', 'sqrt', 'tan' ...] |
|                                         |                                                                      |



#+begin_src python :session :results output
"""
import XXX           -> XXX.myfunc -> voie recommandée
from XXX import YYY  -> YYY        -> déconseillée pour éviter les pbs de conflits de variables
"""

import math
from math import pi as pie, sin as sine
print(math.pi)
print(pie)
print(sine(pie/2))
print(dir(math)[:10])
#+end_src

#+RESULTS:
: 3.141592653589793
: 3.141592653589793
: 1.0
: ['__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh']


#+begin_src python :session :results output
from math import pi, radians, degrees, sin, cos, tan, asin
print(degrees(radians(90)))
print(radians(90) == pi/2)
#+end_src

#+RESULTS:
: 90.0
: True
: 1.106186954104004


** module math

# peut être appelé directement sans importer math :
# mais peut etre également appelé via le module math
# pow(x,y) : x puissance y
# import math puis math.pow(x,y)
# abs(x) valeur absolue n'est pas dans math


| sin(x)       |                                          |
| cos(x)       |                                          |
| tan(x)       |                                          |
| asin(x)      | arcsine de x                             |
| acos(x)      |                                          |
| atan(x)      |                                          |
| pi           |                                          |
| radians(x)   | converti degré en radian                 |
| degrees(x)   | converti radian en degré                 |
| sinh(x)      | hyperbolic sine                          |
| cosh(x)      |                                          |
| tanh(x)      |                                          |
| asinh(x)     |                                          |
| acosh(x)     |                                          |
| atanh(x)     |                                          |
|--------------+------------------------------------------|
| e            | constante de euler                       |
| exp(x)       | e puissance x                            |
| log(x)       |                                          |
| log(x,b)     | logarithm de x à la base b               |
| log10(x)     | logarithm décimal de x                   |
| log2(x)      | logarithm binaire de x                   |
|--------------+------------------------------------------|
| ceil         | arrondi entier supérieur                 |
| floor(x)     | x // 1  arrondi entier inférieur         |
| trunc(x)     | partie entière                           |
| factorial(x) | éq x! en math                            |
| hypot(x,y)   | longueur de l'hypoténuse (via pythagore) |
|              |                                          |



#+begin_src python :session :results output
from math import ceil, floor, trunc
x=1.1
y=2.6
print(floor(x), floor(y))
print(floor(-x), floor(-y))
print(ceil(x), ceil(y))
print(ceil(-x), ceil(-y))
print(trunc(x), trunc(y))
print(trunc(-x), trunc(-y))
#+end_src

#+RESULTS:
: 1 2
: -2 -3
: 2 3
: -1 -2
: 1 2
: -1 -2

** module random

| from random import random, seed, randrange, randint |                                                    |
|-----------------------------------------------------+----------------------------------------------------|
| random()                                            | float entre 0.0 et 1.0 non compris                 |
|-----------------------------------------------------+----------------------------------------------------|
| seed()                                              | met le seed sur l'heure courante                   |
| seed(int)                                           | fixe le seed -> random.random() devient prévisible |
|-----------------------------------------------------+----------------------------------------------------|
| randrange(end)                                      | valeur entière, end *non inclus* car "range"       |
| randrange(beg, end)                                 |                                                    |
| randrange(beg, end, step)                           |                                                    |
|-----------------------------------------------------+----------------------------------------------------|
| randint(beg, end)                                   | valeur entière, end *inclus*                       |
|-----------------------------------------------------+----------------------------------------------------|
| choice(seq)                                         | choisi un au hasard dans la list ou tuple          |
| sample(seq, n)                                      | [] avec n éléments choisis au hasard               |
|                                                     |                                                    |


#+begin_src python :session :results output
from random import random, seed, choice, sample
seed(0)
print(random() == 0.8444218515250481) 
print(random() == 0.7579544029403025)
seed()
print(random())

tup = (1,2,3,4,5)
print(choice(tup))
print(sample(tup, 2))
#+end_src

#+RESULTS:
: True
: True
: 0.6619319105111775
: 4
: [2, 3]

** module platform

| from platform import *  |                                      |
|-------------------------+--------------------------------------|
| platform()              | system() + machine() + processor()   |
| system()                | linux                                |
| machine()               | x86                                  |
| processor()             | 64 bits                              |
| version()               | smp preempt dynamic 7 janvier 2023   |
|-------------------------+--------------------------------------|
| python_implementation() | nom de l'implémentation de Python    |
| python_version_tuple()  | Python version (major, minor, patch) |
|                         |                                      |

#+begin_src python :session :results output
from platform import platform, machine, processor, system, version, python_implementation, python_version_tuple
print("platform", platform())
print("machine", machine())
print("processor", processor())
print("system", system())
print("version", version())
print("python_implementation", python_implementation())
print("python_version_tuple", python_version_tuple())
#+end_src

#+RESULTS:
: platform Linux-6.0.18-200.fc36.x86_64-x86_64-with-glibc2.35
: machine x86_64
: processor x86_64
: system Linux
: version #1 SMP PREEMPT_DYNAMIC Sat Jan 7 17:08:48 UTC 2023
: python_implementation CPython
: python_version_tuple ('3', '10', '10')


** package = groupe de modules = répertoire

|-----------------------|
| pour faire un package |
|-----------------------|
- créer un répertoire /home/thai/python/my_package
- créer my_package/__init__.py
- créer des fichiers .py et des sous répertoires à my_package

|--------------------------|
| pour utiliser un package |
|--------------------------|
path.append le répertoire contenant tous les packages
import my_package.<fichier avec la fonction désirée>


#+begin_src python :session :results output
"""
répertoire des packages : /home/thai/checkout/python/formation/lab
2 manières de l'utiliser :

import my_package.iota
my_package.iota.FunI()

vs

from my_package.iota import FunI
FunI()
"""

from sys import path
path.append("/home/thai/checkout/python/formation/lab")

import my_package.iota
print(my_package.iota.FunI())

from my_package.good.alpha import FunA
print(FunA())
#+end_src

#+RESULTS:
: Iota
: Alpha



| #!/usr/bin/env python3 | shebang                                                                      |
|------------------------+------------------------------------------------------------------------------|
| import <module>        | exécute le contenu du module une fois même si plusieurs import               |
|------------------------+------------------------------------------------------------------------------|
| *__pycache__*          | code semi compilé .pyc créé automatiquement lors de l'import du module par python |
|------------------------+------------------------------------------------------------------------------|
| *__name__*             | vaut <module> si on est dans un module sinon vaut __main__                   |
|                        | ex usecase : lance des tests unitaires si appelé directement                 |
|------------------------+------------------------------------------------------------------------------|
| <module>._mycount      | convention : on met un ou deux underscore devant une variable dans le module |
| <module>.myfunc(x)     |                                                                              |
|------------------------+------------------------------------------------------------------------------|
| *__init__.py*          | à mettre à la *racine* du package                                            |
|------------------------+------------------------------------------------------------------------------|
| as                     | alias                                                                        |
|                        | import my_package.iota as io                                             |
|                        |                                                                              |

** module sys

| from sys import *                              |                                                                    |
| path                                           | [] avec des directory et .zip (gère les zip comme des répertoires) |
|------------------------------------------------+--------------------------------------------------------------------|
| path.append("/path/to/module_dir")             | ajoute le module au path pour pouvoir l'importer                   |
| path.append("\\path\\to\\windows\\module_dir") |                                                                    |
| import module                                  |                                                                    |
|------------------------------------------------+--------------------------------------------------------------------|
| path.append("/path/to/module_dir/pack.zip")    | pack.zip contient my_package/iota.py                               |
| from my_package.iota import FunI               | on l'utilise normalement                                           |
|------------------------------------------------+--------------------------------------------------------------------|
| exit()                                         |                                                                    |


** pip (pip installs packages) = python package installer = permet de browser le repo PyPI (python package index)
# PyPI est managé par le Packaging Working Group de la Python Software Fondation
# https://pypi.org
# ~ 315k projets et ~520k users
# on peut créer son propre repo également

| pip                                | package installer résolvant les dépendances     |
| pip help                           |                                                 |
| pip --version                      |                                                 |
| pip --user ...                     | en tant que user local                          |
|------------------------------------+-------------------------------------------------|
| pip list                           | liste tous les packages et la version installés |
| pip show <installed package>       | metadata + dependencies                         |
| https://pypi.org/search            | recherche de package                            |
|------------------------------------+-------------------------------------------------|
| pip install -U <installed package> | maj à la dernière version                       |
| pip install pygame==1.9.2          | install une version particulière                |
| pip uninstall pygame               |                                                 |


* strings, string and list methods, exceptions

** python est internationalisé compatible unicode

# encodage de caractères = ascii ou unicode
# codepoint = le numéro associé au caractère
# stockage des caractères unicode = ucs-4 ou utf-8 (le plus optimal en terme d'espace)


| ASCII                | 256 caractères                                                                   |
| i18n                 | internationalisation                                                             |
|                      | " " = code point 32                                                              |
|                      | "A" = code point 65                                                              |
|                      | "a" = code point 97 (65+32=92)                                                   |
|                      |                                                                                  |
| code point 0 - 127   | standard latin alphabet                                                          |
| code point 127 - 256 | dépend du code page ex. iso/iec8859-2 ou iso/iec8859-5                           |
|----------------------+----------------------------------------------------------------------------------|
| unicode              | +1 million de code points pour avoir des caractères uniques                      |
|                      | 0-127 : identique à ascii                                                        |
|                      | 127-256 : identique à iso/iec8859-1                                              |
|----------------------+----------------------------------------------------------------------------------|
| ucs-4                | universal character set : standard décrivant l'implémentation de l'unicode       |
|                      | chaque caractère est stocké sur 32 bits (4 bytes)                                |
| bom                  | byte order mark, bits invisibles décrivant la nature du contenu du fichier ucs-4 |
|----------------------+----------------------------------------------------------------------------------|
| utf-8                | unicode transformation format, taille variable                                   |
|                      | caractères latins sont stockés sur 8 bits                                        |
|                      | caractères non latins sur 16 bits                                                |
|                      | cjk china-japan-korea sur 24 bits                                                |


** string = sequences immutable

comme c'est une sequence on peut
- *slicer* [:]
- *indexer* [n]
- *itérer* for i in
- *comparer*
  x in
  x not in


comme c'est immutable, on ne peut pas
- *supprimer* del x[n]
  par contre on a le droit de faire del x pour supprimer le nom de variable
- *ajouter* x.append()
- *insérer* x.insert(i,n)

| """               | str multiligne                    |
| '''               |                                   |
|-------------------+-----------------------------------|
| + *               | + concaténer                      |
|                   | * répliquer                       |
| 'a' + 'b'         | 'ab'                              |
| 'a' * 2           | 'aa'                              |
|-------------------+-----------------------------------|
| *=                | s'applique aussi aux str          |
| +=                |                                   |
|-------------------+-----------------------------------|
| ord(x)            | caractère -> code point           |
| chr(n)            | code point -> caractère           |
| chr(ord(x)) == x  | True                              |
| ord(chr(x)) == x  | True                              |
|-------------------+-----------------------------------|
| x[begin:end:step] |                                   |
| "abcdef"[::2]     | "ace"                             |
|-------------------+-----------------------------------|
| min()             | penser ascii table                |
| max()             |                                   |
|-------------------+-----------------------------------|
| min("abc")        | "a"                               |
| min("aA")         | "A"                               |
| min(" aA")        | " "                               |
| min("")           | *ValueError*                      |
|-------------------+-----------------------------------|
| list("abc")       | ["a","b","c"]                     |
|-------------------+-----------------------------------|
| len("\n\n")       | 2                                 |
|-------------------+-----------------------------------|
| "ab".index("a")   | index du *premier* élément trouvé |
| "ab".index("c")   | *ValueError* si absence           |
|-------------------+-----------------------------------|
| "aba".count("a")  | nb d'occurences trouvé            |
|-------------------+-----------------------------------|
| "abc"[::-1]       | "cba" *inverse l'ordre*           |




#+begin_src python :session :results output
print(ord(" "))
print(chr(945))
print("abcdef"[::2])
print(min("abc"))
#+end_src

#+RESULTS:
: 32
: α
: ace
: a

** string methods

| "aBcD".capitalize()                  | Abcd                                                         |
| " aBcD".capitalize()                 | aBcD                                                         |
| "123".capitalize()                   | 123                                                          |
| "αβγδ".capitalize()                  | Αβγδ                                                         |
|--------------------------------------+--------------------------------------------------------------|
| "aBcD".swapcase()                    | AbCd                                                         |
|--------------------------------------+--------------------------------------------------------------|
| "hello world".title()                | Hello World -> tous les mots ont une majuscule               |
|--------------------------------------+--------------------------------------------------------------|
| "abc".upper()                        | ABC                                                          |
|--------------------------------------+--------------------------------------------------------------|
| "ABC".lower()                        | abc                                                          |
|--------------------------------------+--------------------------------------------------------------|
| "alpha".center(10)                   | "  alpha   " -> ajoute des espaces et centre                 |
| "alpha".center(2)                    | "alpha"                                                      |
| "alpha".center(10,"#")               | '##alpha###'                                                 |
|--------------------------------------+--------------------------------------------------------------|
| "alpha".startswith("al")             | True                                                         |
|--------------------------------------+--------------------------------------------------------------|
| "alpha".endswith("ha")               | True                                                         |
|--------------------------------------+--------------------------------------------------------------|
| "ab".find("a")                       | index du *premier* élément trouvé                            |
| "ab".find("c")                       | -1                                                           |
| "kappa".find("a", 2)                 | 4 -> trouve "a" à partir de l'index 2 compris                |
| "kappa".find("a", 2, 4)              | -1 -> trouve "a" à partir de l'index 2 jusqu'à 4 non compris |
|--------------------------------------+--------------------------------------------------------------|
| "0123456789".rfind("5")              | 5 -> find from the right                                     |
| "0123456789".rfind("5",4)            | 5 -> dans la portion [4:]                                    |
| "0123456789".rfind("5",6)            | -1 -> pas trouvé                                             |
| "0123456789".rfind("5",4,6)          | 5 -> dans la portion [4:6]                                   |
|--------------------------------------+--------------------------------------------------------------|
| "".isalnum()                         | False -> doit être a-zA-Z0-9                                 |
| "hello world".isalnum()              | False                                                        |
| "ab".isalpha()                       | True -> seulement a-zA-Z                                     |
| "12".isdigit()                       | True -> seulement 0-9                                        |
| "ab".islower()                       | True -> alpha et lowercase                                   |
| "\n".isspace()                       | True -> espace                                               |
| "AB".isupper()                       | True -> alpha et uppercase                                   |
|--------------------------------------+--------------------------------------------------------------|
| ":".join(('ab','c'))                 | ab:c -> marche avec tuple ou liste                           |
|                                      | *TypeError* si autre chose que des str                       |
|--------------------------------------+--------------------------------------------------------------|
| "SiGmA=60".lower()                   | sigma=60                                                     |
|--------------------------------------+--------------------------------------------------------------|
| "\n \t tau ".lstrip()                | "tau " -> left strip                                         |
| "www.cisco.com".lstrip("w.")         | cisco.com -> supprime les w et . devant                      |
| "accent".lstrip("ac")                | ent                                                          |
| " accent".lstrip("ac")               | " accent"                                                    |
|--------------------------------------+--------------------------------------------------------------|
| " tau \n \t".rstrip()                | " tau" -> right strip                                        |
| "cisco.com".rstrip(".com")           | cis                                                          |
|--------------------------------------+--------------------------------------------------------------|
| "\n \t tau \n \t".strip()            | tau                                                          |
|--------------------------------------+--------------------------------------------------------------|
| "azerty".replace("zer", "ppe")       | appety                                                       |
| "azerty".replace("", "*")            | -a-z-e-r-t-y- -> insère entre les lettres                    |
| "This is it!".replace("is", "at", 1) | That is it! -> une seule occurence max                       |
|--------------------------------------+--------------------------------------------------------------|
| "abc def\nghi".split()               | ['abc', 'def', 'ghi']                                        |
|                                      |                                                              |


** find vs index

| find()           | vs | index()              |
|------------------+----+----------------------|
| str only         |    | toutes les sequences |
| -1 si non trouvé |    | *ValueError*         |


** string comparaison

| "alpha" == "alpha"    | True                                  |
| "alpha" < "alphabet"  | True                                  |
| "Beta" < "beta"       | True (compare le premier codepoint B) |
| " " < "0" < "A" < "a" | True                                  |
| "010" < "10"          | True                                  |
| "20" < "8"            | True                                  |
| "10" != 10            | True                                  |
| "10" > 10             | *TypeError*                           |
|                       |                                       |

** transformation
| str(x)      |              |
| int("12")   |           12 |
| int("12.8") | *ValueError* |
| float("12") |         12.0 |
| float("A")  | *ValueError* |
|             |              |


** sorted(x) vs x.sort()
# sorted(x) = créé une nouvelle liste triée
# x.sort() = la liste est triée in-place


| sorted(["omega", "alpha", "pi", "gamma"]) | ['alpha', 'gamma', 'omega', 'pi'] |
|                                           |                                   |

** exceptions
- 63 builtin exception
- l'ordre des except compte car le premier qui match est choisi

# try:
# except ZeroDivisionError:        <- le premier qui correspond est choisi
# except ArithmeticError:
# except (ValueError, IndexError): <- plusieurs exception
# except:                          <- en dernier et unique

| ValueError        | paramètre incorrect ex. float('A') |
| ZeroDivisionError |                                    |
| IndexError        | out of range                       |


# ex. du plus général au plus spécialisé
# BaseException <- Exception <- ArithmeticError <- ZeroDivisionError

** raise et assert

| raise ZeroDivisionError | lève une exception                                   |
| raise                   | dans un except seulement -> relève la même exception |
|-------------------------+------------------------------------------------------|
| assert <expression>     | lève AssertionError si False ou 0                    |
|                         |                                                      |


#+begin_src python :session :results output
def notok(x):
    try:
        return 1/x
    except:
        print("notok except")
        raise

try:
    notok(0)
except ArithmeticError:
    print("ArithmeticError")
#+end_src

#+RESULTS:
: notok except
: ArithmeticError

** quelques exceptions

# abstract builtin exceptions
| exceptions        | parents                                     | exemples                           |
|-------------------+---------------------------------------------+------------------------------------|
| ArithmeticError   | Exception > BaseException                   | 1/0                                | 
| BaseException     |                                             | *                                  |
| LookupError       | Exception > BaseException                   | collections                        |


# concrete builtin exceptions
| exceptions        | parents                                     | exemples                           |
|-------------------+---------------------------------------------+------------------------------------|
| AssertionError    | Exception > BaseException                   | assert 0                           |
| ImportError       | StandardError > Exception > BaseException   | import incorrect                   |
| IndexError        | LookupError > Exception > BaseException     | [1,2][2]                           |
| KeyboardInterrupt | BaseException                               | Ctrl-c                             |
| KeyError          | LookupError > Exception > BaseException     | { 'a':1, 'b':2 } ['c']             |
| MemoryError       | Exception > BaseException                   | manque de mémoire disponible       |
| OverflowError     | ArithmeticError > Exception > BaseException | nombre trop grand pour être stocké |
|-------------------+---------------------------------------------+------------------------------------|
| AttributeError    |                                             | attribut d'une class inexistant    |


* object oriented programming

# MyClass.__name__   = nom de la classe
# MyClass.__module__ = module de la classe ex. __main__
# MyClass.__bases__  = les superclasses    ex. (Parent1, Parent2, MyClass)  


| LIFO                             | last in first out                                                                                                   |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| introspection                    | capacité à examiner le type ou les variables d'un objet pendant l'exécution                                         |
| reflection                       | capacité à manipuler les variables et les fonctions d'un objet pendant l'exécution                                  |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| for name in obj.__dict__.keys(): | boucle sur les variables de l'objet                                                                                 |
| isinstance(val, int)             | val est il une instance de int ?                                                                                    |
| getattr(obj, name)               | valeur associée à la variable name                                                                                  |
| setattr(obj, name, val)          |                                                                                                                     |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| propriété d'instance             | variable de classe ou variable d'instance                                                                           |
| variable de classe               | définie dans class                                                                                                  |
| self.__var                       | deux underscore -> variable d'instance privée => concept d'encapsulation => AttributeError si on essaie d'y accéder |
| self.var                         | variable d'instance publique                                                                                        |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| __init__(self)                   | constructeur ne peut *pas* retourner de valeur et appelable seulement depuis un constructeur *fils*                 |
| method(self, param)              | méthode avec toujours le premier en tant que self pour représenter l'objet                                          |
| __method(self, param)            | méthode privée avec *name mangling*                                                                                 |
| __str__(self)                    | méthode spéciale permettant d'être print()                                                                          |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| hasattr(objet, 'b')              | b est il une variable d'instance ou de classe ?                                                                     |
| hasattr(MyClass, 'b')            | b est il une variable de classe ?                                                                                   |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| mangled name                     | les variables d'instances privées sont qd même accessible via un nom spécial _Myclass__myhiddenvar                  |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| objet.__dict__                   | dictionnaire avec toutes les variables d'instances (mais pas les variables de classes !!)                           |
| MyClass.__dict__                 | dictionnaire avec var d'instances, var de classes, méthodes publiques et privées                                    |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| méthode                          | toujours au moins un paramètre self                                                                                 |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| type(obj).__name__               | nom de la classe de l'objet                                                                                         |
| MyClass.__name__                 | MyClass                                                                                                             |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| obj.__module__                   | __main__                                                                                                            |
| MyClass.__module__               | __main__                                                                                                            |
| str.__module__                   | builtins                                                                                                            |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
| MyClass.__bases__                | tuples avec les classes parents                                                                                     |
| str.__bases__                    | (<class 'object'>,)                                                                                                 |
|----------------------------------+---------------------------------------------------------------------------------------------------------------------|
|                                  |                                                                                                                     |

#+begin_src python :session :results output
class Stack:
    class_counter = 0
    
    def __init__(self):
        self.__stack_list = []
        Stack.class_counter += 1
        class_counter = 123 # piège ! variable locale

    def push(self, val):
        self.__stack_list.append(val)

    def pop(self):
        val = self.__stack_list[-1]
        del self.__stack_list[-1]
        return val

""" héritage """    
class AddingStack(Stack):
    def __init__(self):
        Stack.__init__(self) # à faire seulement dans un constructeur
        self.__sum = 0
        self.nothing = 0

    def push(self, val): # overriding
        self.__sum += val
        Stack.push(self, val) # appel de la méthode parente

    def pop(self): # overriding
        val = Stack.pop(self)
        self.__sum -= val
        return val

    def get_sum(self):
        return self.__sum
    
obj = AddingStack()
obj.push(2)
obj.push(1)
print("sum =", obj.get_sum())
print(obj.pop())
print(obj.pop())

obj.__custom = "hello world" # ajout d'une variable d'instance à la volée
print(obj.__dict__)
print("hack AddingStack __sum", obj._AddingStack__sum)

AddingStack()
print("class counter", Stack.class_counter)

print("AddingStack class __dict__", AddingStack.__dict__)
print(hasattr(obj, "class_counter"))
#+end_src

#+RESULTS:
: sum = 3
: 1
: 2
: {'_Stack__stack_list': [], '_AddingStack__sum': 0, 'nothing': 0, '__custom': 'hello world'}
: hack AddingStack __sum 0
: class counter 2
: AddingStack class __dict__ {'__module__': '__main__', '__init__': <function AddingStack.__init__ at 0x7feed72ea680>, 'push': <function AddingStack.push at 0x7feed72ea710>, 'pop': <function AddingStack.pop at 0x7feed72ea7a0>, 'get_sum': <function AddingStack.get_sum at 0x7feed72ea830>, '__doc__': None}
: True




# les noms de variables d'instances privées sont transformées, on peut utiliser ce nom pour y accéder
# par contre si on défini une variable de classe en dehors de la classe, le nom n'est pas transformé !



#+begin_src python :session :results output
"""
self.var permet de référencer variable de classe ou variable d'instance
""" 
class Daddy:
    def __init__(self):
        print("daddy init")
        
class Classy(Daddy):
    var = 2
    def method(self):
        print(self.var)
        self.other()

    def other(self):
        print("other")

obj = Classy()
obj.method()
print(type(obj).__name__)
#+end_src

#+RESULTS:
: daddy init
: 2
: other
: Classy


#+begin_src python :session :results output
class SuperOne:
    pass

class SuperTwo:
    pass

class Sub(SuperOne, SuperTwo):
    pass

def printBases(cls):
    print('( ', end='')

    for x in cls.__bases__:
        print(x.__name__, end=' ')
    print(')')

printBases(SuperOne)
printBases(SuperTwo)
printBases(Sub)
#+end_src

#+RESULTS:
: ( object )
: ( object )
: ( SuperOne SuperTwo )



#+begin_src python :session :results output
"""
demo introspection
"""
class MyClass:
    pass

obj = MyClass()
obj.a = 1
obj.b = 2
obj.i = 3
obj.ireal = 3.5
obj.integer = 4
obj.z = 5


def incIntsI(obj):
    for name in obj.__dict__.keys(): # on boucle sur les variables
        if name.startswith('i'):
            val = getattr(obj, name) # obtient la valeur associée à la variable
            if isinstance(val, int): # type int ?
                setattr(obj, name, val + 1) 

print(obj.__dict__)
incIntsI(obj)
print(obj.__dict__)
#+end_src

#+RESULTS:
: {'a': 1, 'b': 2, 'i': 3, 'ireal': 3.5, 'integer': 4, 'z': 5}
: {'a': 1, 'b': 2, 'i': 4, 'ireal': 3.5, 'integer': 5, 'z': 5}




** héritage = passer des attributs et méthodes de la super-class à la sous-class



| issubclass(ClassOne, ClassTwo) | True si ClassOne est une sous-class de ClassTwo                   |
| issubclass(ClassOne, ClassOne) | True car *Une classe est une sous-class de lui même*              |
| isinstance(obj, MyClass)       | True si obj est une instance de la class ou super-class MyClass   |
|                                |                                                                   |


#+begin_src python :session :results output
class MyClass:
    def __str__(self):
        return "I am MyClass"

class Baby(MyClass):
    pass

    
mc = Baby()

print(mc)
print(issubclass(Baby, MyClass))
print(issubclass(Baby, Baby))
print(isinstance(mc, MyClass))
#+end_src

#+RESULTS:
: I am MyClass
: True
: True
: True
