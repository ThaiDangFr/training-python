#+OPTIONS: toc:nil num:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [8pt,a4paper]


#+TITLE: PCAP certification python exam practice tests PCAP-31-03

* practice 1
*les moins prioritaires des opérateurs*
tout ce qui est ?=
ex. = *= += -= /= %= //= >>= <<= ^= |= &= 

x = 5
x //= 1 + 1   # on fait 1+1 d'abord, et 5//2 = 2


*le plus prioritaire des opérateurs*
puissance    # ex. x ** y


*priorité opérateur bool*
not
and
or



*tri*
seulement les listes ont une méthode .sort(key=, reverse=)

sorted(<iterable>, key=<fn>, reverse=True)       # renvoie une list, ex. pour trier str, dict, list 

pour les dict ça renvoit une liste des keys
key permet de spécifier sur quel élément on base le tri

ex.

dic = {'a':2, 'b':3, 'c':1}
print(sorted(dic, key=lambda x: dic[x], reverse=True)) # ['b', 'a', 'c'] renvoi une liste de clef en faisant un tri descendant sur les valeurs


*else*
for ..:
else:            # toujours exécuté en dernier sauf si break

while ..:
else:            # toujours exécuté en dernier sauf si break

try..:
except:
else:            # exécuté si pas d'erreur



*PyPi*
c'est le repo de PWG (packaging working group)


*property args de la classe Exception*
e.args contient un tuple (,) avec tous les paramètres passés

*global x*
rend la variable x globale, elle existe maintenant en dehors et dans la fonction

ex.

def myfunc():
    global b
    b=2

myfunc()
print(b)  # 2


*liste en paramètre d'une fonction*

comme la liste est mutable on passe une référence
les types immutable comme les literals on copie la valeur

ex.

def myfunc(lst, i):
    lst[0] = 1         # lst est altérée
    i = 1              # i nouvelle variable locale
    
lst = [0]
i = 0
myfunc(lst, i)

print(lst) # [1]
print(i)   # 0
    

*scope*
important : on ne peut pas réassigner une variable globale (sauf si déclaré global)
mais on peut la modifier si elle est mutable

ex:

x = 1
y = {}

def func():
    print(x)  # python utilise x = 1 donc x est globale
    x = 2     # impossible car on ne peut pas assigner une var globale

    
def func2():
    x = 2     # x est définie comme locale
    print(x)  # imprime 2


def func3(x=x):
    x += 1    # possible car x est définie en local car en paramètre
    print(x)  # imprime 2

def func4():
    x += 1    # impossible, pour faire x+1 on prend la valeur globale, x est donc globale, et on ne peut pas modifier une var globale
    print(x)

def func5():
    print(y)      # on prend y global
    y['a'] = 1    # possible car modification et non réassignation


    

*list.insert(index, elem)*

on insert à l'index et on décale vers la droite

ex.[0,1,2].insert(0,1) = [1,0,1,2]


*bool*
les seules valeurs qui peuvent donner False sont :
(les autres étant à True)

False
None
0
0.0
''
[]
{}
()
set()
0j
range(0)


*exponentielle*

2E3 = 2 * 10**3 (float)


*nom de variable*

[_a-ZA-Z][_a-ZA-Z0-9]* :
   
- ne commence pas par un chiffre
- alphanumérique et _ 
- n'est pas  un mot réservé de python

ex. valable :

_  = 1
_1 = 1


ex. non valable :
1_
in


*mots réservés de python*

True False None and or not in is
from import as class with
def if elif else try except finally while for break continue raise return pass yield
assert del global lambda nonlocal


*platform*
import platform

platform.platform()                    # Linux-6.0.18-200.fc36.x86_64-x86_64-with-glibc2.35
platform.system()                      # Linux
platform.machine()                     # x86_64
platform.processor()                   # x86_64
platform.version()                     # #1 SMP PREEMPT_DYNAMIC Sat Jan 7 17:08:48 UTC 2023
platform.python_implementation()       # CPython
platform.python_version_tuple()        # ('3', '10', '10')   major minor patch


*os*

import os

os.uname().sysname                     # Linux                                                     
os.uname().machine                     # x86_64
os.uname().version                     # #1 SMP PREEMPT_DYNAMIC Sat Mar 11 16:46:48 UTC 2023 
os.uname().nodename                    # ci640                                                   
os.uname().release                     # 6.1.18-100.fc36.x86_64                                  
    
                                               
os.name                                # posix

os.chdir(..)
   mkdir(..)                           # FileExistsError si répertoire existe déjà
   makedirs(..)
   getcwd(..)
   listdir()
   rmdir(..)
   removedirs(..)

os.system("ls")



| platform.system()   | os.uname().sysname | Linux                                               |
| platform.machine()  | os.uname().machine | x86_64                                              |
| platform.version()  | os.uname().version | #1 SMP PREEMPT_DYNAMIC Sat Mar 11 16:46:48 UTC 2023 |
| platform.platform() | os.uname().release | 6.1.18-100.fc36.x86_64                                                    |



*import*
from      = permet d'invoquer le nom de la fonction directement

sans from = sinon on doit mettre le path entier package.module.fonction

ex.
from p.m import f
f()

from p import m
m.f()

import p.m
p.m.f()


import p.m.f       # on ne peut pas importer une fonction sans from ! ModuleNotFoundError: No module named 'p.m.f'  

*pip*
pip install
pip install pygame==1.9.2
pip install -U
pip uninstall
pip show
pip list
pip --version

*fonctions is.. has..  get.. set..*

isinstance(obj, A)
issubclass(A, B)

hasattr(objet, 'b') 
hasattr(MyClass, 'b')

getattr(obj, name)
setattr(obj, name, val)


ex.
isinstance("az", str)
isinstance("az", (str,int))  # True


*dunder*

MyClass.__name__         = nom de la classe
MyClass.__module__       = module de la classe ex. builtins ou __main__
MyClass.__bases__        = () avec la ou les classes parents    ex. (Parent1, Parent2) car class MyClass(Parent1, Parent2)
MyClass.__subclasses__() = [] avec les classes filles
MyClass.__dict__         = {} avec les var et et méthodes

obj.__dict__ = {} avec var d'instance seulement
obj.__module__


if __name__ == "__main__":    # pour savoir si le script est exécuté directement ou appelé au travers d'un module



*multiple assignments*

x = 1
y = 2

x,y = y,x   # x=2 et y=1

*format*
format(2.123, ".2f")  # "2.12"
format(2, ".2f")      # "2.00"


*map et filter*
map(fn, iterable)
map(fn, iterable1 .. iterablen)          # fn va prendre en argument 1 iterable1, en arg 2 iterable 2, etc.

filter(fn, iterable)

ex.
map(lambda x,y: x+y, [1,2,3], [4,5,6])   # [5,7,9]
filter(lambda x: x>=2, [1,2,3])          # [2,3] 


*generator*
yield
(x for x in range(2))


*iterator*
__iter__()  __next__()  raise StopIteration
map()
filter()

* practice 2

*str*
les strings délimités par des espaces sont automatiquement concaténés
x = "Hello" "World"    # "HelloWorld"


'bc' in 'abc'          # True
'' in 'abc'            # True

'abbabadaadbbaccabc'.count('ab', 1)     # 2   compte nb d'occurence de 'ab' à partir de l'index 1
"azaz".index("za")                      # 1
"azaz".find("za")                       # 1   find dispo seulement pour les str

"azaz".index("zt")                      # ValueError
"azaz".find("zt")                       # -1



*generator et iterator*
generator est une sous classe de iterator

iterator =
- objet d'une classe contenant les méthodes *__iter__()* et *__next__()*, et doit *raise StopIteration* quand on arrive à la fin
- map(fn,lst)
- filter(fn,lst)

generator =
fonction retournant *yield*
(x ** 2 for x in range(5))   noter les () -> les valeurs sont déterminées au fur et à mesure de l'itération
 

ex.
import collections,types
issubclass(map, collections.Iterator)      # True
issubclass(filter, collections.Iterator)   # True




*priorité*
d'abord calculer les **
puis identifier les + et - qui sont moins prioritaires
puis calculer de la gauche vers la droite

ex.
x // 2 * 2 / 2 + y % 2 ** 3

devient

(((x // 2) * 2) / 2) + (y % (2 ** 3))



*hasattr*

hasattr(Class, "method")  # True si Class possède une méthode "method"

*file io*
read()
readline()
readlines()
readinto(bytearray)

write()
writelines()

seek(n)
close()


*PyPI*
aussi appelé cheese shop

*slicing inverse*
il faut un step négatif
l'extrémité est exclusif comme d'habitude

a = [1, 2, 3, 4, 5]
a[3:0:-1]             # [4,3,2]

*bytearray*
bytearray(3)                # bytearray(b'\x00\x00\x00')
bytearray([3])              # bytearray(b'\x03')
bytearray([65, 66, 67])     # bytearray(b'ABC')

*set*

collection non ordonnée d'éléments uniques
pas d'indexing (car non ordonné)


myset0 = set()                      # set vide
myset1 = {1, 2, 3}                  # set avec éléments 1,2,3
myset2 = set([3,3,4,5])             # set avec éléments uniques 3,4,5

myset1.union(myset2)                # fusionne les 2 sets                                            {1,2,3,4,5}
myset1.intersection(myset2)         # créer un set avec les éléments en commun                       {3}
myset1.difference(myset2)           # créer un set en suppimant les éléments présent dans l'autre    {1,2}
myset1.symetric_difference(myset2)  # fusionne en supprimant les éléments en commun                  {1,2,4,5}


for elem in myset:                 # pour boucler
myset.add(5)                       # rajoute l'élément 5
myset.remove(5)                    # supprime l'élément 5


*variable de classe*

obj.var            # retourne variable d'instance, si existe pas alors retourne variable de classe



ex.

class Class:
    var = 1

obj = Class()
obj.var = 2        # créer une variable d'instance var, qui porte le mm nom que la variable de classe, mais ce n'est pas la mm chose

print(obj.var)     # 2
print(Class.var)   # 1


obj2 = Class() 
print(obj2.var)    # 1    -> retourne la variable de classe car pas de variable d'instance avec ce nom

Class.var = 3
print(obj.var)     # 2    -> retourne la variable d'instance
print(obj2.var)    # 3    -> retourne la variable de classe car pas de variable d'instance à ce nom

print(Class.__dict__)  # {'__module__': '__main__', 'var': 3, '__dict__': <attribute '__dict__' of 'Class' objects>, '__weakref__': <attribute '__weakref__' of 'Class' objects>, '__doc__': None}
print(obj.__dict__)    # {'var': 2}
print(obj2.__dict__)   # {}


*tuple*

foo = (1, 2, 3)
foo.index(0)           # ValueError: tuple.index(x): x not in tuple


*list*

[0,1,2,3].pop()        # supprime le dernier de la liste et retourne l'élément enlevé, ici 3


*comparaison d'objet*

implémenter la méthode __eq__(self, other):


*else*

exécuté si pas d'erreur (try except) ou de break (loop)


try:
except Exception as e:
except:                    # toujours le dernier except
else:                      # exécuté si pas d'erreur
finally:


x = 10
x = 1 if x > 0 else 2      # 1


while x > 0:
else:                      # exécuté si pas de break

for x in range(10):
else:                      # exécuté si pas de dbreak





ex.

x, y = 3.0, 0.0
try:
    z = x / y
except ArithmeticError:
    z = -1
else:
    z = -2
print(z)                  # -1



* practice 3

*héritage multiple*

python va d'abord chercher à partir de la gauche vers la droite s'il arrive à résoudre

ex. Quatre(Troi, Deux) => cherche dans Troi s'il trouve la variable voulue
                       => puis dans Deux s'il ne trouve pas

class Un:
    value = "Eins"
 
    def say(self):
        return self.value.lower()
 
 
class Deux(Un):
    value = "Zwei"
 
 
class Troi(Un):
    def say(self):
        return self.value.upper()
 
 
class Quatre(Troi, Deux):
    pass
 
 
d = Quatre()
b = Deux()

d.value         # Zwei
Quatre.__mro__  # (<class '__main__.Quatre'>, <class '__main__.Troi'>, <class '__main__.Deux'>, <class '__main__.Un'>, <class 'object'>)


*les types*
10/'0'        # TypeError

type(())      # Tuple
type({})      # Dict

type({1})     # Set
type({1:1})   # Dict

type((1))     # int
type((1,))    # tuple


*concatenation*
[1,2] + [3]   # [1,2,3]
(1,)  + (2,)  # (1,2)
'1'   + '2'   # '12'

*multiplication*
[1,2] * 2     # [1,2,1,2]
(1,)  * 2     # (1,1)
'1'   * 2     # '11'


*unsupported concatenation or multiplication*
{1,2} + {3}   # TypeError: unsupported operand type(s) for +: 'set' and 'set'
{1:1} + {2:2} # TypeError: unsupported operand type(s) for +: 'dict' and 'dict'

{1}   * 2     # TypeError: unsupported operand type(s) for *: 'set' and 'int'
{1:1} * 2     # TypeError: unsupported operand type(s) for *: 'dict' and 'int'


*argv*
from sys import argv
argv[0]       # nom du script


*id*

class A:
    def __init__(self, x=0):
        self.x = x
 
 
obj1 = A(2)
obj2 = A(2)
id(obj1) != id(obj2)     # True
 
str1 = 'Hello'
str2 = 'Hello'
id(str1) == id(str2)     # True

x=42
y=42
x is y                   # True



*multiple exceptions*

except (TypeError, ValueError, ZeroDivisionError):
except (TypeError, ValueError, ZeroDivisionError) as error:


*len*
obj.__len__()  correspond à len(obj)

ex.
data = ()               # tuple
print(data.__len__())   # 0


*complex*
représenté par j ou J ou via la fonction complex()

ex.
complex(2,3)   # 2+3j
1j
1J


*héritage de constructeur*

si la classe fille ne définit pas son constructeur, alors elle va hériter de celui de la classe parent


ex.

class A:
    def __init__(self):
        print("constructeur A appelé")
 
class B(A):
    pass

class C(A):
    def __init__(self):
        print("constructeur C appelé") 
    
 
b = B()    # constructeur A appelé
c = C()    # constructeur C appelé


*list comprehension*
[x for x in range(10)]                     # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[x for x in range(10) if x % 2 == 0]       # [0, 2, 4, 6, 8]

*slicing*
"abc"[::]     # "abc"
"abc"[::-1]   # "cba"

*constructeur*
TypeError si il y a un return dedans (autre que None)      # TypeError: __init__() should return None

*imports*

from p.m import f   # from = permet d'utiliser directement sans le path complet
f()

from p import m     # from = permet d'utiliser directement sans le path complet
m.f()

import p.m          # pas de from = path complet obligatoire
p.m.f()



*dict*
d = {(1,2): 3}
d[(1,2)]          # 3
d[1,2]            # 3 -> marche aussi comme ça

*opération*

division retourne toujours un float
pour les autres, si un des opérandes est un float, alors le résultat est un float

4.5 // 2 = 2.0
4   // 2 = 2
4   /  2 = 2.0


'ab' in 'abc'       # True
'ac' not in 'abc'   # True
not 'ac' in 'abc'   # True


*list en paramètre*
pour pouvoir altérer un objet mutable il faut appelé une méthode sur lui
+= équivaut à append()
si on réassigne avec le même nom c'est juste local !


def func(item):
    item += [1]        # on concatène, équivalent à append(1)
 
 
data = [1, 2, 3, 4]
func(data)
print(len(data))       # 5



par contre si on reassign c'est seulement local

def func(item):
    item = [1]         # local

data = [1, 2, 3, 4]    
func(data)
print(len(data))       # 4




*poo*
encapsulation = protège donnée sensible via des variables privées

* practice 4

*lambda*

s = lambda x: 0 if x == 0 else 1 if x > 0 else -1     #  <expr> if x > 0 else -1
s(-273.15)                                            # -1


*codepoints*

le petit avion vole plus haut que le grand arbre de l'espace

les minuscules ont plus de poids que les majuscules

"a" > "A" > " "

ord("a") = 97
ord("A") = 65
ord(" ") = 32

'mike' > 'Mike'  # True


*curiosité*
comme True = 1 et False = 0

3/True          # 3.0




*égalité*

a = [1,2]
b = a

a is b    # True  (compare l'id)
a == b    # True  (compare la value)


*list.remove()*

a = [1,2,3,2]
a.remove(2)    # [1,3,2]  supprime la première occurence trouvée
a.remove(2)    # [1,3]


*tuple*

data1 = 'a', 'b'          # équivalent au tuple ('a','b')
data2 = ('a', 'b')

data1 is data2            # toujours False sauf pour les str, int, float
data1 == data2            # True car la valeur est la même


*exponentiel*
1e10                      # float 1*10**10 = 10000000000.0
1E10                      # float 


*dict*
data = {}
data[1] = 1               # {1:1}
data[1.0] = 4             # {1:4}

data2 = {}
data2[1.0] = 1            # {1.0:1}
data2[1] = 4              # {1.0:4}

*list indexing*
assigner plusieurs valeurs à une liste

x = ['a','b','c','d']

x[0] = 7                  # [7,'b','c','d']
x[-1] = 8                 # [7,'b','c',8]
x[1:3] = 0,1              # [7,0,1,8]


*exceptions*
int("three")              # ValueError
1/int("0")                # ArthmeticError ou ZeroDivisionError
"5"/0                     # TypeError
print(Hello, World!)      # SyntaxError

En majorité les exceptions s'appelle ..Error

BaseException > Exception > ..Error

BaseException > Exception > ArthmeticError > FloatingPointError OverflowError ZeroDivisionError
BaseException > Exception > LookupError    > IndexError KeyError CodecRegistryError


*modification de la liste sur laquelle on boucle*

quand on boucle, python retient l'index et incrémente l'index interne
si la liste est modifiée entre temps, sur la prochaine itération, on va chercher la valeur correspondante avec l'index+1


import time
a = [1,2]
for i in a:
    a.insert(0, i+1)
    print(a)
    time.sleep(1)


[1,2]              # index 0, i=1
[2,1,2]            # index 1, i=1
[2,2,1,2]          # index 2, i=1
[2, 2, 2, 1, 2]    # index 3, i=1

*read vs readinto*

file.read()        # retourne un objet bytes
file.readinto(b)   # remplit un bytearray

*héritage*

une classe ne peut pas hériter d'une classe haute avant la moyenne (MRO method resolution order)


ex.
class Top:
    pass

class Left(Top):
    pass

class Right(Top):
    pass


correct :
class Bottom(Left, Top)
class Bottom(Right, Top)
class Bottom(Left, Right)

incorrect :
class Bottom(Top, Left)
class Bottom(Top, Right)
    

*encode*

encode en utf-8 par défaut 

"python".encode()                    # b'python'
"pythön".encode()                    # b'pyth\xc3\xb6n'
"pythön".encode("ascii", "ignore")   # b'pythn'


*random*

import random

random.sample((1,2,3), 2)   # ex. [1,3]     choisi 2 dans la séquence
random.choice((1,2,3))      # ex. 3         choisi 1 dans la séquence
random.random()             # entre 0 et 0.99999..
random.randint(0,2)         # 0 1 ou 2   (2 inclus)
random.randrange(0,2)       # 0 ou 1     (2 exclus)


* practice 5

*opérateurs*
pour les puissances, faire de la droite vers la gauche, contrairement aux autres opérateurs

2 ** 3 ** 2 ** 1 = 2 ** (3 ** (2 ** 1))


*finally*

le finally est toujours exécuté en dernier même avec un return

def func():
    try:
        return 1
    finally:
        return 2
 
res = func() # 2
print(res)


*seed*
si fixé alors rend déterministe le résultat

import random
 
random.seed(0)
x = random.choice([1, 2])
random.seed(0)
y = random.choice([1, 2])
print(x - y)

*list.copy() vs copy.deepcopy(list)*

copy et deepcopy créé un autre objet distinct, donc un id différent

copy     = aka shallow copy, effectue une copie mais les objets imbriqués référencent l'original
deepcopy = copie complète sans référence


ex.

data1 = [1,2, [3,4]]
data2 = data1.copy()           # id(data1) != id(data2)
data2[0] = 0                   # seul data2 vaut [0,2, [3,4]]
data2[2][0] = 0                # data2 = [0, 2, [0, 4]] et data1 = [1, 2, [0, 4]] car on a modifié une liste imbriquée

import copy
data3 = copy.deepcopy(data1)   # id(data1) != id(data3)
data3[2][1] = 0                # seul data3 vaut [1,2, [0,0]]


*os.path*

os.path.isfile(..)    : un fichier existe ?
os.path.isdir(..)     : un répertoire existe ?
os.path.exists(..)    : un fichier ou répertoire existe ?



*__name__*

vaut soit __main__ soit le nom du module

lab.py :
print(__name__)


vaut __main__ si python lab.py
vaut lab      si import lab

*id*

tous le même id pour str int:

str1 = "aze"
str2 = str[::]
str3 = "az" + "e"

d1   = 2
d2   = 1+1



pas le même id pour les autres:
l1 = [1,2]
l2 = [1] + [2]

t1 = (1,2)
t2 = (1,) + (2,)

f1 = 2.0
f2 = 1.0 + 1.0


*==*
on compare la valeur
valable pour tout sauf les class custom ou il faut définir __eq__(self)


*constructeur*
invocation du constructeur parent, 2 méthodes :
A.__init__(self)
super().__init__()



    
*méthode de résolution*

ex.

classe C(B,A)   :  C => B => A  cherche d'abord dans B si trouve l'info, puis dans A

obj.x           : regarde si une variable d'instance x existe puis regarde si une variable de classe x existe



* practice 6

*reduce*

reduce(lambda x,y: <..>, iterable) prend les 2 premiers éléments pour avoir un résultat
avec ce résultat et la prochaine itération effectue le calcul, etc.


from functools import reduce
num = reduce(lambda x, y: x if (x > y) else y, [47, 11, 42, 102, 23])  # 102

[47, 11, 42, 102, 23]
[47, 42, 102, 23]
[47, 102, 23]
[102, 23]
102

*formating*

2 méthodes :

"the average score for {0} is {1:.2f}".format("Toto", 200)

"%s is %d" % ("John", 25)            # "John is 25"
"%10s is %5d" % ("John", 25)         # "      John is    25"     10 caractères pour le prénom et 5 pour l'âge complétés par des espaces
"%-10s is %5.1f" % ("John", 25.15)   # "John       is  25.1"     10 caractères pour le prénom aligné à gauche, 5 pour l'âge avec 1 décimale





*custom Exception*

soit dériver de BaseException ou Exception

*sorted*

sorted("zyx")     # ['x', 'y', 'z']


*pip*
pip install packages

pip --version
pip -V 


*curiosité*
cette écriture est valable

if 90 <= average <= 100:
    grade = 'A'


++++1                                                                    # 1  quelque soit le nombre de +
--1                                                                      # 1  nombre pair de - alors devient +
---1                                                                     # -1

str(None)                                                                # "None"

super().__init__() alors que non défini dans la classe parent            # acceptable et rien ne se produit

[print(x, end=" ") for x in range(3)]                                    # retourne [None, None, None] et imprime 0 1 2



*priorité des opérateurs*

parenthèse
exposant
unary positive, negative, not
multiplication, division, floor division, modulus
addition, soustraction
and


ex

2**3 and 2*4          # 8 and 8 = 8


*comparaison*

'Mike' < 'Mikey       # on compare lettre par lettre et comme y > ''


*eval*
évalue l'expression python contenu dans le str

eval("123")                          # 123
eval("3/2")                          # 1.5
eval("[x**2 for x in range(1,4)]")   # [1, 4, 9]
eval("hello")                        # NameError
eval("'hello'")                      # "hello"


*redéfinition*
list = [1,2,3]       # list défini comme une liste
def list(d):         # list redéfini en tant que fonction donc la liste originelle n'existe plus
    return d[0]

list(list)           # la fonction list est passé en paramètre de la fonction list



*ascii*
american standard code for information interchange

pour simplifier, du plus petit code au grand :

espace
chiffres
A-Z
a-z


ord('a')-ord('A') == ord(' ') == 32

max(['abc', 'def']) == 'def'           # d est plus grand que a

' '*0 == ''

*math*

math.fabs(-1)                   # 1.0         renvoi un float avec la valeur absolue
math.floor(4.9)                 # 4           renvoi la partie entière
math.fmod(7,2)                  # 1.0         renvoi un float de 7 % 2
math.frexp(4)                   # (0.5, 3)    renvoi mantisse et exposant 4 = 0.5 * 2**3



*erreurs courantes*
ValueError                                  conversion, index() non trouvé, pb paramètre       int("three")    [1,2,3].index(4)    date(2023,12,32)
IndexError                                  indexing out of range                              [1,2,3][3]
ArthmeticError ou ZeroDivisionError         div par 0                                          1/int("0")                 
TypeError                                   mauvais type d'operand, mauvais nb de param        "5"/0           math.pow(2)                    
SyntaxError                                 ne veut rien dire                                  print(Hello, World!)    # à cause du point d'exclamation
NameError                                   variable non définie                               print(Hello, World)     # Hello non définie



attention, SyntaxError n'est pas catché par except !

ex.

try:
    print(Hello World)
except:                   # ne catch pas SyntaxError qui sera affiché à l'écran
    print("Erreur")

    
    
| errno.EACCES | permission denied                                                             |
| errno.EBADF  | bad descriptor file        ex. stream non ouvert                              |
| errno.EEXIST | fils exists                ex. renommer avec son nom précédent                |
| errno.EFBIG  | file too large                                                                |
| errno.EISDIR | is a directory             ex. manip un fichier alors que c'est un répertoire |
| errno.EMFILE | too many open files                                                           |
| errno.ENOENT | no entry = no such file or directory                                          |
| errno.ENOSPC | no space left on device                                                       |



