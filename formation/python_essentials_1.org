#+OPTIONS: toc:nil num:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [8pt,a4paper]


#+TITLE: Python essential 1 sur skillforall.com

* Introduction to python and computer programming
| language                        | alphabet + lexis + syntax + semantics                                        |
| IL                              | instruction list = langage machine                                           |
| high level programming language | pont entre humain et langage machine                                         |
| compilation                     | transforme le code source en langage machine                                 |
| interpretation                  | traduit à la volée                                                           |
| python                          | langage interprété avec un interpréteur obligatoire aka "scripting language" |
| PSF                             | python software foundation                                                   |



| compilation                             | vs | interpretation                                        |
|-----------------------------------------+----+-------------------------------------------------------|
| exec + rapide                           |    | le code source peut être exécuté plus tôt             |
| enduser n'a pas besoin du compilateur   |    | le code source est utilisable sur différents hardware |
| langage machine obfusque le code source |    |                                                       |
|-----------------------------------------+----+-------------------------------------------------------|
| compilation prend du temps              |    | exec - rapide                                         |
| compilateur dépend du hardware          |    | enduser a besoin de l'interpréteur                    |



| CPython     | Implémentation par PSF de Python écrit en C                                |
| Cython      | converti du Python en langage C pour des programmes liés aux mathématiques |
| Jython      | implémentation de Python en Java                                           |
| MicroPython | implémentation de Python optimisé pour les microcontrolleurs               |

| IDLE     | Integrated Development and Learning Environment ~ lance une console en Python |
| Python 3 | non compatible avec Python 2                                                  |


* Python data types, variables, operators and basic IO operations

** python literals

| provenance des functions               | built-in python                                                           |
|                                        | modules                                                                   |
|                                        | écrit par soi                                                             |
|----------------------------------------+---------------------------------------------------------------------------|
| function call (ou function invocation) | vérif le nom de la fonction                                               |
|                                        | vérif le nb d'arguments                                                   |
|                                        | rentre dans la function et exécute                                        |
|                                        | retourne dans le programme principal                                      |
|----------------------------------------+---------------------------------------------------------------------------|
| une seule instruction par ligne        | pas possible d'en mettre plusieurs                                        |
|----------------------------------------+---------------------------------------------------------------------------|
| arguments                              | positional ~ suit un ordre                                                |
|                                        | keyword ~ ex. mafunc(a=1, b=2) !! keyword doit être placé à la fin si mix |
|----------------------------------------+---------------------------------------------------------------------------|
| 69 built-in function ds python 3       | https://docs.python.org/3/library/functions.html                          |
|----------------------------------------+---------------------------------------------------------------------------|
| string                                 | délimité par double ou simple quotes                                      |
| backslash \                            | le prochain caractère a une signification spéciale ex. \n ou \\           |
|----------------------------------------+---------------------------------------------------------------------------|
| binaire                                | prefix 0b ou 0B  (ex. 0b10011011)                                         |
| octal                                  | prefix 0o ou 0O  (ex. 0o123)                                              |
| hexadecimal                            | prefix 0x ou 0X  (ex. 0x123)                                              |
|----------------------------------------+---------------------------------------------------------------------------|
| .4                                     | 0.4                                                                       |
| 4.                                     | 4.0                                                                       |
|----------------------------------------+---------------------------------------------------------------------------|
| int                                    | 4                                                                         |
| float                                  | 4.0                                                                       |
|                                        | 3E8 ~ 3 fois 10 exposant 8 = donne un float                               |
| bool                                   | True ou False                                                             |
| constante de planck                    | 6.62607E-34                                                               |
|----------------------------------------+---------------------------------------------------------------------------|
| True > False                           | True car True=1 et False=0                                                |
| True + False                           | 1                                                                         |
| True/False                             | ZeroDivisionError                                                         |
|----------------------------------------+---------------------------------------------------------------------------|
| literal                                | valeur fixe ex. 123 ou "123"                                              |
|                                        | None (class NoneType) ~ absence de valeur                                 |
|----------------------------------------+---------------------------------------------------------------------------|
| convertir binaire en décimal           | 1   0   0  1 1 0 1 1                                                      |
|                                        | 128 64 32 16 8 4 2 1                                                      |
|                                        | -> on les multiplie puis additionne                                       |
|                                        | 128 + 16 + 8 + 2 + 1 = 155                                                |
|----------------------------------------+---------------------------------------------------------------------------|
| unary operator                         | un seul opérande ex. -1 ou +3                                             |
| binary operator                        | deux opérandes ex. 4 + 5                                                  |
| hiérarchie des opérateurs              | **                                                                        |
|                                        | + - unary operator                                                        |
|                                        | * / %                                                                     |
|                                        | + - binary operator                                                       |
| exponentiel **                         | le seul opérateur dont la priorité est par la droite                      |
|----------------------------------------+---------------------------------------------------------------------------|
| builtin scalar                         | int float str bool                                                        |
|                                        | complex bytes                                                             |
|                                        | datetime.datetime datetime.timedelta                                                                          |


#+begin_src python :session :results output
print("a", "b", "c")
print("hello", end=" ")
print("world")
print("a", "b", "c", sep="-")
print(int(0b10011011))
print("a", 6, '1', 2.0) # mix différent type possible
#+end_src

#+RESULTS:
: a b c
: hello world
: a-b-c
: 155
: a 6 1 2.0


** operators - data manipulation tools

|        |                                                                                 | résultat float si un des 2 est float           |
|        |                                                                                 | résultat int si les 2 sont int                 |
|--------+---------------------------------------------------------------------------------+------------------------------------------------|
| +      | plus                                                                            |                                                |
| -      | moins                                                                           |                                                |
| '*'    | fois                                                                            |                                                |
| //     | division et arrondi à l'entier le plus petit !! attention aux valeurs négatives | floor division                                 |
| %      | le reste (modulo)                                                               | remainder                                      |
| **     | puissance                                                                       |                                                |
| ** 0.5 | racine carré ~ x puissance 0.5                                                  |                                                |
|--------+---------------------------------------------------------------------------------+------------------------------------------------|
| '/'    | diviser                                                                         | exception à la règle : résultat toujours float |
|        |                                                                                 |                                                |


| ZeroDivisionError | x/0  |
|                   | x//0 |
|                   | x%0  |



| a % b % c   | (a % b) % c    | priorité gauche à droite                           | left sided binding  |
| a ** b ** c | a ** ( b ** c) | exception pour ** : priorité droite vers la gauche | right sided binding |




#+begin_src python :session :results output
print(6 // 4) # 1.5 arrondi à 1
print(-6 // 4) # -1.5 arrondi à -2
print(-6. // 4) # -1.5 arrondi à -2
print(12 % 4.5) # 12 - (4.5*2) = 3.0
#+end_src

#+RESULTS:
: 1
: -2
: -2.0
: 3.0


** priorité des opérateurs

| priorité 1 | **       |
| priorité 2 | -a       |
| priorité 3 | * / // % |
| priorité 4 | + -      |


#+begin_src python :session :results output
print(-3 ** 2) # - (3 ** 2) = -9
print(2 * 3 % 5) # (2*3) % 5 = 1
print((2 ** 4), (2 * 4.), (2 * 4))
print((-2 / 4), (2 / 4), (2 // 4), (-2 // 4))
print((2 % -4), (2 % 4), (2 ** 3 ** 2))
#+end_src

#+RESULTS:
: -9
: 1
: 16 8.0 8
: -0.5 0.5 0 -1
: -2 2 512

** exercice mental à faire pour vérifier la compréhension

formule du modulo
a % b = a - [a/n] * n
[x] représente le plus grand entier inférieur à x

2 % -4 = 2 - [-0.5]*(-4) = 2 - (-1)*(-4) = 2-4 = -2


| calcul      | résultat |
|-------------+----------|
| -3 ** 2     |       -9 |
| 2 * 3 % 5   |        1 |
| 2 * 4.      |      8.0 |
| 2 // 4      |        0 |
| -2 // 4     |       -1 |
| 2 ** 3 ** 2 |      512 |
| 4 / 2       |      2.0 |
| 4 // 2      |        2 |
| 3 % 4       |        3 |
| -1 % 4      |        3 |
| 2 % -4      |       -2 |
| 9 % 4 % 2   |        1 |
| 1 in [1.0]  |     True |
| 1 == 1.0    |     True |
|             |          |




** variables

| variable                                    | [_a-ZA-Z][_a-ZA-Z0-9]* : ne commence pas par un chiffre et ne doit pas être un mot réservé de python |
|                                             | pas forcément latin, caractères spécifiques aux langues possibles (accents, russe, etc)              |
|                                             | créé et initié automatiquement quand on assigne une valeur                                           |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| typage dynamique                            | pas besoin de déclarer                                                                               |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| convention sur les vars et noms de fonction | mots lowercase séparé par _  ex. my_variable my_function                                             |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| mots réservés                               | True False None and or not in is                                                                     |
|                                             | from import as class with                                                                            |
|                                             | def if elif else try except finally while for break continue raise return pass yield                 |
|                                             | assert del global lambda nonlocal                                                                    |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| print(var)                                  | NameError : on ne peut pas utiliser une variable qui n'a pas de valeur assignée                      |
|                                             |                                                                                                      |

** shortcut operator


|----------------------+---------------------------------|
| définition           |                                 |
| a ?= x               | a = a ? x                       |
|----------------------+---------------------------------|
| x *= 2               | x = x*2                         |
|----------------------+---------------------------------|
| a =+ 1               | éq. a = 1     attention piège ! |
| a += 1               | éq. a = a + 1                   |
|----------------------+---------------------------------|
| i += 2 * j           | i = i +  2 * j                  |
| var /= 2             | var = var / 2                   |
| rem %= 10            | rem = rem % 10                  |
| j -= (i + var + rem) | j = j - (i + var + rem)         |
| x **= 2              | x = x ** 2                      |



#+begin_src python :session :results output
x = 1
x = float(x)
y = 3*x**3 - 2*x**2 + 3*x - 1
print(y)
#+end_src

#+RESULTS:
: 3.0

** interaction with the user

| x = input()              | lit une entrée utilisateur via la console et retourne un **str** |
| x = input("Votre age: ") | avec un prompt                                                   |
|--------------------------+------------------------------------------------------------------|
| float(x)                 | converti en float un str                                         |
| int(x)                   | converti en int un str                                           |
| str(x)                   | converti en str                                                  |

** string operators

| "a" + "b"            | "ab"  | concatenation |
| "a" * 3   ou 3 * "a" | "aaa" | replication   |

** conversion minutes en heure
| 5000 minutes | heures = 5000 // 60 = 83h |
|              | minutes = 5000 % 60 = 20m |


* boolean values, conditional execution, loops, lists and list processing, logical and bitwise operations
** operators
| a = 3   | assignment                      |
| a == b  | equal to, retourne True / False |
| 2 == 2. | True                            |
| !=      | not equal to, True False        |
| >       | greater than                    |
| >=      | greater than or equal to        |
| <       | less than                       |
| <=      | less than or equal to           |

** table des priorités
# https://docs.python.org/3/reference/expressions.html#operator-precedence

| priority | operator                          |        |
|        1 | ~ + -                             | unary  |
|        2 | **                                |        |
|        3 | * / // %                          |        |
|        4 | + -                               | binary |
|        5 | << >>                             |        |
|        6 | < <= > >=                         |        |
|        7 | == !=                             |        |
|        8 | &                                 |        |
|        9 | ¦ (pipe)                          |        |
|       10 | = += -= *= /= %= &= ^= ¦= >>= <<= |        |

** statements

| indentation               | recommendation est d'utiliser 4 espaces              |
|---------------------------+------------------------------------------------------|
| if xxx:                   |                                                      |
| elif yyy:                 |                                                      |
| else:                     | optionnel mais toujours en dernier sinon SyntaxError |
|---------------------------+------------------------------------------------------|
| while xxx:                |                                                      |
| else:                     | else exécuté en dernier                              |
|---------------------------+------------------------------------------------------|
| for xxx:                  |                                                      |
| else:                     | else exécuté en dernier                              |
|---------------------------+------------------------------------------------------|
| for i in range(100):      | 0 à 99                                               |
| for i in range(2,8):      | 2 3 4 5 6 7                                          |
| for i in range(2,8,3):    | 2 5     (début, fin, incrément)                      |
| for i in range(6, 1, -2): | 6 4 2                                                |
| break                     | met fin à la boucle while ou for                     |
| continue                  | ~ va à la fin du body de la boucle while ou for      |
|---------------------------+------------------------------------------------------|
| KeyboardInterrupt         | suite à Ctrl-C pour sortir d'une boucle infinie      |
| bool(0)                   | False                                                |
| bool(4)                   | True                                                 |
| list(range(1,1))          | []                                                   |
| list(range(2,1)           | []                                                   |
|---------------------------+------------------------------------------------------|
| if x != 0:                | if x:                                                |
| while x !=0:              | while x:                                             |
|---------------------------+------------------------------------------------------|
| i % 2 == 0                | even (pair)                                          |
| i % 2 != 0                | odd (impair)                                         |



#+begin_src python :session :results output
"""
différente façon pour if
"""

# avec indentation
if True:
    print(True)
else:
    print(False)

# sans indentation    
if True: print(True)
else: print(False)
#+end_src

#+RESULTS:
: True
: True

** builtin function
| max(**args)  |                    |
| min(**args)  |                    |
| round(x,0)   | arrondi à 0        |
|--------------+--------------------|
| range(n)     | [0, à n-1]         |
|--------------+--------------------|
| range(x,y,z) | x int de début     |
|              | y int de fin       |
|              | z int de incrément |
|--------------+--------------------|
| pow(x,y)     | x puissance y      |

#+begin_src python :session :results output
year = int("1996")

if year < 1582:
    print("Not within the Gregorian calendar period")
else:
    if year % 4 != 0:
        print("Common year")
    elif year % 100 != 0:
        print("Leap year")
    elif year % 400 != 0:
        print("Common year")
    else:
        print("Leap year")
#+end_src

#+RESULTS:
: Leap year


#+begin_src python :session :results output
"""
else dans les boucles
"""
n = 0
while n != 3:
    print(n)
    n += 1
else:
    print(n, "else")
 
print()
 
for i in range(0, 3):
    print(i)
else:
    print(i, "else")
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3 else
: 
: 0
: 1
: 2
: 2 else

** logic and bit operations



| bool(0)          | False               |                 |
| bool(1 ou autre) | True                |                 |
|------------------+---------------------+-----------------|
| a and b          | bool                | x               |
| a or b           | bool                | +               |
| not a            | bool                |                 |
|------------------+---------------------+-----------------|
| &                | bitwise and         | x               |
| ¦ (pipe)         | bitwise or          | +               |
| ^                | bitwise xor         | -               |
| ~                | bitwise not         |                 |
| >>               | bitwise right shift |                 |
| <<               | bitwise left shift  |                 |
|------------------+---------------------+-----------------|
| x &= y           | x = x & y           |                 |
| x ¦= y           | x = x ¦ y           |                 |
| x ^= y           | x = x ^ y           |                 |
|------------------+---------------------+-----------------|
| not (a and b)    | (not a) or (not b)  | (de Morgan law) |
| not (a or b)     | (not a) and (not b) | (de Morgan law) |
|------------------+---------------------+-----------------|
| not (a+b<=c)     | a+b>c               |                 |




# calcul de 6^5 = 3
# attention : entier seulement pas float !

| décimal | 16 | 8 | 4 | 2 | 1 |
|---------+----+---+---+---+---|
|       6 |  0 | 0 | 1 | 1 | 0 |
|---------+----+---+---+---+---|
|       ^ |    |   |   |   |   |
|---------+----+---+---+---+---|
|       5 |  0 | 0 | 1 | 0 | 1 |
|---------+----+---+---+---+---|
|---------+----+---+---+---+---|
|       3 |  0 | 0 | 0 | 1 | 1 |

# addition binaire : 1 + 1 = 0 avec une retenue de 1

| décimal | 16 | 8 | 4 | 2 | 1 |
|---------+----+---+---+---+---|
|       6 |  0 | 0 | 1 | 1 | 0 |
|---------+----+---+---+---+---|
|       + |    |   |   |   |   |
|---------+----+---+---+---+---|
|       5 |  0 | 0 | 1 | 0 | 1 |
|---------+----+---+---+---+---|
|---------+----+---+---+---+---|
|      11 |  0 | 1 | 0 | 1 | 1 |


# avancé
| x & 1 = x  |
| x & 0 = 0  |
| x ¦ 1 = 1  |
| x ¦ 0 = x  |
| x ^ 1 = ~x |
| x ^ 0 = x  |

** shift bits

| a >> 1  | a // 2 |                                   |
| a >> 2  | a // 4 |                                   |
|---------+--------+-----------------------------------|
| a << 1  | a * 2  |                                   |
| a << 1  | a * 4  |                                   |
|---------+--------+-----------------------------------|
| 17 >> 1 | 8      | 1 décalage binaire vers la droite |
| 17 << 2 | 68     | 2 décalage binaire vers la gauche |


| opération | 64 | 32 | 16 | 8 | 4 | 2 | 1 | décimal |
|-----------+----+----+----+---+---+---+---+---------|
|           |    |    |  1 | 0 | 0 | 0 | 1 |      17 |
|-----------+----+----+----+---+---+---+---+---------|
| >> 1      |    |    |  0 | 1 | 0 | 0 | 0 |       8 |
| << 2      |  1 |  0 |  0 | 0 | 1 | 0 | 0 |      68 |
|-----------+----+----+----+---+---+---+---+---------|

** calcul de ~

# ~17 = 238 (= 255-17)

| opération | 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |               décimal |                                                              |
|-----------+-----+----+----+----+---+---+---+---+-----------------------+--------------------------------------------------------------|
|           |   0 |  0 |  0 |  1 | 0 | 0 | 0 | 1 |                    17 |                                                              |
|-----------+-----+----+----+----+---+---+---+---+-----------------------+--------------------------------------------------------------|
| not       |   1 |  1 |  1 |  0 | 1 | 1 | 1 | 0 |                   238 | intermediate result                                          |



# dans une représentation complément à 2 (le bit le plus à gauche est négatif si bit==1)

| opération | 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | décimal         |                               |
|-----------+-----+----+----+----+---+---+---+---+-----------------+-------------------------------|
|           |     |    |  0 |  1 | 0 | 0 | 0 | 1 | 17              |                               |
|-----------+-----+----+----+----+---+---+---+---+-----------------+-------------------------------|
|           |     |    |  1 |  0 | 1 | 1 | 1 | 0 | -32+8+4+2 = -18 | représentation complément à 2 |
|           |     |    |    |    |   |   |   |   |                 |                               |


** calcul mental
| 4 & 1  | 100 & 001 = 000           |
| 4 ¦ 1  | 100 ¦ 001 = 101 = 5       |
| ~4     | 0100 -> 1011 -> -8+2+1=-5 |
| 4 ^ 5  | 100 ^ 101 = 001 = 1       |
| 4 >> 2 | 100 -> 001   -> 1         |
| 4 << 2 | 100 -> 10000 -> 16        |
| ~True  | ~1 -> ~01 -> -2           |
| ~False | ~0 -> ~00 -> -1           |

** list = ordered mutable collection

| x = []                                                                      | list                                                                     |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| x[start:end]                                                                | slice et créer une nouvelle list, index end non inclus                   |
|                                                                             | si index de end se trouve avant start => []                              |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| x[:]                                                                        | x[0:len(x)]                                                              |
| x[start:]                                                                   | x[start:len(x)]                                                          |
| x[:end]                                                                     | x[0:end]                                                                 |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| a = [..]                                                                    |                                                                          |
| b = a                                                                       | *copie le nom de la liste* b partage le même emplacement mémoire que a   |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| a = [..]                                                                    |                                                                          |
| b = a[:]                                                                    | *copie le contenu de la liste* b et a sont indépendants                  |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| [].append(x)                                                                | ajoute à la fin                                                          |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| [].insert(n, x)                                                             | insert x à l'index n et décale à droite                                  |
|                                                                             | l'index n est autorisé à dépasser                                        |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| [].sort()                                                                   | trie une liste                                                           |
| [].reverse()                                                                | inverse la liste                                                         |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| [].index(x)                                                                 | index de x ou ValueError si non trouvé                                   |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| x in []                                                                     | bool                                                                     |
| x not in []                                                                 | bool                                                                     |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| len(x)                                                                      | longueur de []                                                           |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| del x[n]                                                                    | instruction supprimant un élément d'une liste                            |
| del x[start:end]                                                            | supprime un slice, index end non inclus                                  |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| IndexError                                                                  | lecture ou écriture x[n] avec n en dehors des index                      |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| for i in []:                                                                |                                                                          |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| x,y = y,x                                                                   | permet de swapper des variables sans besoin d'une variable intermédiaire |
| x[n], x[m] = x[m], x[n]                                                     |                                                                          |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| [ expression for element in list if conditional ]                           | list comprehensions                                                      |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| a = [2**x for x in range(8)]                                                | [1, 2, 4, 8, 16, 32, 64, 128]                                            |
| [x for x in a if x % 4 == 0]                                                | multiple de 4 -> [4, 8, 16, 32, 64, 128]                                 |
| [[i for i in range(10)] for j in range(10)]                                 | 2D array                                                                 |
|-----------------------------------------------------------------------------+--------------------------------------------------------------------------|
| rooms = [[[False for i in range(20)] for j in range(15)] for k in range(3)] | 3D array ex. 3 hotels avec 15 étages de 20 chambres                      |
|                                                                             | room[1][9][13] = True : on réserve 2ieme hotel, 10ieme étage, chambre 14 |
|                                                                             |                                                                          |



#+begin_src python :session :results output
"""
list
"""
x = ['a', 'b', 'c']
del x[1]
print(x)
x.insert(-1, 'd')
print(x)
#+end_src

#+RESULTS:
: ['a', 'c']
: ['a', 'd', 'c']


|       | [ | 'a' | 'b' | 'c' | ] |
|-------+---+-----+-----+-----+---|
| index |   |   0 |   1 |   2 |   |
|       |   |  -3 |  -2 |  -1 |   |

** function vs method
| my_func(x)       | function => retourne un résultat |
| obj.my_method(x) | method (poo) => peut changer obj |
|                  |                                  |

** del : supprimer une variable ou un élément ou un slice

| del x[0]         | supprime le premier élément d'une liste                           |
| del x[start:end] | supprime un slice d'une liste                                     |
|------------------+-------------------------------------------------------------------|
| del a            | supprime le nom a (mais pas le contenu) on ne peut plus l'appeler |
| print(a)         | NameError: name 'a' is not defined                                |
|------------------+-------------------------------------------------------------------|
|                  |                                                                   |

#+begin_src python :session :results output
"""
the bubble sort algorithm
on fait plusieurs passes en inversant 2 par 2
"""
my_list = [8,10,6,2,4]

swapped = True
passes = 0
while swapped:
    swapped = False
    passes += 1
    for i in range(len(my_list)-1):
        if my_list[i] > my_list[i+1]:
            my_list[i], my_list[i+1] = my_list[i+1], my_list[i]
            swapped = True

print("Passes", passes, sep=": ")
print(my_list)
#+end_src

#+RESULTS:
: Passes: 4
: [2, 4, 6, 8, 10]


#+begin_src python :session :results output
"""
utilisation de sort() et reverse()
"""
a,b,c = 3,1,2
x = [a,c,b]
x.sort()
print(x)
x.reverse()
print(x)
#+end_src

#+RESULTS:
: [1, 2, 3]
: [3, 2, 1]


** noms
| nom de variable | nom de son contenu           |
| nom de liste    | nom de l'emplacement mémoire |

#+begin_src python :session :results output
a = 3
b = a
a = 1
print(a,b) 

a = [1,2]
b = a # b et a partagent le même emplacement mémoire pour la liste => réfère à la même liste
a[1] = 3
del a[0] # supprime le contenu à l'index 0
del a # juste le nom a est supprimé, pas le contenu
print(b)
#+end_src

#+RESULTS:
: 1 3
: [3]

** exercice mental
| [[(x,j) for x in range(3)] for j in range(2)] | [[(0, 0), (1, 0), (2, 0)], [(0, 1), (1, 1), (2, 1)]]  |
|-----------------------------------------------+-------------------------------------------------------|
| my_list = [1, 2, 3]                           |                                                       |
| my_list.insert(1, my_list[0])                 | [1,1,2,3]                                             |
| my_list.insert(1, my_list[1])                 | [1,1,1,2,3]                                           |
|-----------------------------------------------+-------------------------------------------------------|
| True and True or False and False              | True                                                  |
|                                               | priorité (les mm qu'en arithmétique) : not > and > or |
|-----------------------------------------------+-------------------------------------------------------|
| mylist = [1,2]                                |                                                       |
| def mylist():                                 | mylist est redéfinie, la list n'existe plus           |


* functions, tuples, dictionaries, exceptions and data processing

| def my_function(parameter):  | retourne None par défaut                                                                                           |
| return                       | retourne None                                                                                                      |
| return x                     | retourne x                                                                                                         |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| provenance des function      | builtin functions                                                                                                  |
|                              | preinstalled modules                                                                                               |
|                              | user defined                                                                                                       |
|                              | lambda                                                                                                             |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| nommage des function         | mm que pour les variables                                                                                          |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| NameError                    | si la fonction n'est pas définie                                                                                   |
| TypeError                    | si la fonction est appelée avec un pb d'argument (nombre / keyword incorrect / plusieurs valeurs pour un argument) |
| SyntaxError                  | si la function est déclarée avec des valeurs par défaut non en dernier ex. def myfunc(a,b=2,c)                     |
| RecursionError               | si la fonction récursive ne se termine pas                                                                         |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| parameters                   | variables existant dans la fonction                                                                                |
| arguments                    | variables existant en dehors                                                                                       |
| shadowing                    | les parametres de mm nom que les variables extérieures sont indépendants à l'intérieur des fonctions               |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| positional parameter passing | passage de paramètres par position                                                                                 |
| keyword argument passing     | passage de paramètres par le nom                                                                                   |
| mix positional keyword       | positional puis keyword *à l'appel et à la déclaration*                                                            |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| def myfunc(a,b,c):           |                                                                                                                    |
| myfunc(1,2,3)                | ok                                                                                                                 |
| myfunc(1,c=3,b=2)            | ok                                                                                                                 |
| myfunc(1,a=1,b=2)            | TypeError: myfunc() got multiple values for argument 'a'                                                           |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| def myfunc(a,b,c=3)          | c à une valeur par défaut                                                                                          |
| myfunc(1,2)                  | ok                                                                                                                 |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| if x is None:                |                                                                                                                    |
| int(None)                    | TypeError: int() argument must be a string                                                                         |
| str(None)                    | 'None'                                                                                                             |
|------------------------------+--------------------------------------------------------------------------------------------------------------------|
| recursion                    | la fonction s'appelle elle même                                                                                    |
|                              | attention car consomme plus de mémoire et risque infinite loop                                                     |


** scopes
| variable externe à la fonction | elle existe dans la fonction en lecture si aucune variable ne porte le même nom |
|                                | une écriture entraine la création d'une nouvelle variable à portée locale       |
|--------------------------------+---------------------------------------------------------------------------------|
| global y                       | rend la variable y global, elle existe maintenant en dehors et dans la fonction |
|--------------------------------+---------------------------------------------------------------------------------|
| def myfunc(i):                 |                                                                                 |
| i += 1                         | créé une nouvelle variable locale i et l'incrémente                             |
|--------------------------------+---------------------------------------------------------------------------------|
| def myfunc(x):                 | *modifie la liste x passée en paramètre*                                        |
| x.insert(0,1)                  |                                                                                 |
| del x[-1]                      |                                                                                 |
|                                |                                                                                 |

#+begin_src python :session :results output
def myfunc():
    print(a)
    
def myfunc2():
    global b
    b=2

def cantchangescalar(n):
    n += 1
    
def changelist(x):
    x.insert(0,1)
    del x[-1]

a = 3        
myfunc() #output 3

myfunc2() 
print(b) #output 2 à cause de global, b devient accessible même ici !

cantchangescalar(a)
print(a) #output 2 car scalar en paramètre


x=[0,2,3]
changelist(x) # output [1, 0, 2] car non scalar en paramètre (liste)
print(x)

#+end_src

#+RESULTS:
: 3
: 2
: 3
: [1, 0, 2]

** multi parameter functions

#+begin_src python :session :results output
def imc(weight, height):
    return weight / height ** 2


def lb_to_kg(lb):
    return lb * 0.45359237

def ft_and_inch_to_m(ft, inch):
    return ft * 0.3048 + inch * 0.0254 

print(imc(63,1.78))
print(ft_and_inch_to_m(0,48))
#+end_src

#+RESULTS:
: 19.883853048857468
: 1.2191999999999998


#+begin_src python :session :results output
"""
factoriel
rappel en math 6! = 1*2*3*4*5*6
attention en python 6! est SyntaxError
"""
def factorial_function(n):
    result = 1
    for i in range(1,n+1):
        result *= i
    return result

for n in range(1, 6): # testing
    print(n, factorial_function(n))
#+end_src

#+RESULTS:
: 1 1
: 2 2
: 3 6
: 4 24
: 5 120

#+begin_src python :session :results output
"""
utilisation de la recursion
"""

def fibo(n):
    if n < 1:
        return None
    elif n == 1 or n == 2:
        return 1
    else:
        return fibo(n-1)+fibo(n-2)

def factorial(n):
    if n < 1:
        return None
    elif n == 1:
        return 1
    else:
        return n*factorial(n-1)


print("fibonacci",n, "->", fibo(5))
print("factorial",n, "->", factorial(5))    
#+end_src        

#+RESULTS:
: fibonacci 5 -> 5
: factorial 5 -> 120

** tuple = ordered immutable collection

# virgule => parentèse => tuple

| (x,)                 | tuple                                                  |
| 1,2,3                | équivaut à  (1,2,3)                                    |
| (1,)                 | tuple avec un seul élément *la virgule est importante* |
| 1,                   | (1,)                                                   |
|----------------------+--------------------------------------------------------|
| (1)                  | *sans la virgule* vaut 1 qui est int                   |
| (1,2) == (1.,2.)     | True                                                   |
| (1,) + (2,)          | (1,2)                                                  |
| (1,2,2,2,3).count(2) | 3                                                      |
|----------------------+--------------------------------------------------------|
| ().index(x)          | index de l'élément x ou ValueError si non trouvé       |
|----------------------+--------------------------------------------------------|
| for i in (a,b):      |                                                        |
| a in (a,b)           | True                                                   |
| c not in (a,b)       | True                                                   |
| len((a,b))           | 2                                                      |
| (a,b) + (c,d)        | (a,b,c,d)                                              |
| (a,b) * 3            | (a,b,a,b,a,b)                                          |
| del mytuple          | supprime la variable                                   |


** dictionary = ordered (depuis python 3.6) mutable key value pair

| {'a':1, 'b':2}                 | dictionary                                                |
| la key                         | doit être un objet *immutable* donc pas une list          |
| len({'a':1})                   | 1                                                         |
|--------------------------------+-----------------------------------------------------------|
| 1 in {1:2}                     | True (teste la clef)                                      |
|--------------------------------+-----------------------------------------------------------|
| for i in {}:                   | boucle sur les clefs                                      |
| for key in {}.keys():          | boucle sur les clefs (list)                               |
| for value in {}.values():      | boucle sur les valeurs                                    |
| for k,v in {}.items():         | boucle sur key value pair (tuple)                         |
|--------------------------------+-----------------------------------------------------------|
| for key in sorted({}.keys()):  | boucle sur les clefs ordonnées                            |
| mylist.sort()                  | in-place                                                  |
| sorted(mylist)                 | nouvelle liste                                            |
|--------------------------------+-----------------------------------------------------------|
| KeyError                       | la clef n'existe pas                                      |
|--------------------------------+-----------------------------------------------------------|
| {                              | hanging indent                                            |
| "cat": "chat",                 |                                                           |
| "dog": "chien                  |                                                           |
| }                              |                                                           |
|--------------------------------+-----------------------------------------------------------|
| mydict[key]                    | accéder à une value                                       |
| mydict.get(key)                |                                                           |
|--------------------------------+-----------------------------------------------------------|
| mydict[new-key] = value        | créer / changer                                           |
| mydict.update({new-key:value}) | créer / changer / merge                                   |
|--------------------------------+-----------------------------------------------------------|
| mydict.popitem()               | suppression de la dernière entrée                         |
| del mydict[existing-key]       | suppression d'une entrée                                  |
| mydict.clear()                 | vide le dictionnaire                                      |
|--------------------------------+-----------------------------------------------------------|
| a = mydict.copy()              | duplique un dictionnaire                                  |
| a = mydict                     | comme pour les listes, référence le même objet en mémoire |
|--------------------------------+-----------------------------------------------------------|
| tuple([1,2])                   | (1,2)                                                     |
| list((1,))                     | [1]                                                       |
| dict(('a',1),('b',2))          | {'a':1, 'b':2}                                            |
|--------------------------------+-----------------------------------------------------------|
|                                |                                                           |


#+begin_src python :session :results output
"""
mydict2 = mydict
vs
mydict2 = mydict.copy()
"""
mydict = {'cat': 'chat', 'dog': 'chien'}
mydict2 = mydict
mydict2['cat'] = 'minou'
print(mydict)

mydict2 = mydict.copy()
mydict2['cat'] = 'miaou'
print(mydict)
#+end_src  

#+RESULTS:
: {'cat': 'minou', 'dog': 'chien'}
: {'cat': 'minou', 'dog': 'chien'}



#+begin_src python :session :results output
"""
merger 2 dictionnaires
"""
dico1 = {'Adam Smith': 'A', 'Judy Paxton': 'B+'}
dico2 = {'Mary Louis': 'A', 'Patrick White': 'C'}
dico_merge = {}

for item in (dico1, dico2):
    dico_merge.update(item)
print(dico_merge)
#+end_src 

#+RESULTS:
: {'Adam Smith': 'A', 'Judy Paxton': 'B+', 'Mary Louis': 'A', 'Patrick White': 'C'}


** exception

| type(3) is int                 | True                                            |
|--------------------------------+-------------------------------------------------|
| try:                           |                                                 |
| except ValueError:             | int('a') float('a')                             |
| except ZeroDivisionError:      | 1/0 2//0 3%0                                    |
| except TypeError:              | mylist[0.5] ou 10/'0' ou None + 1               |
| except AttributeError:         | mylist.dontexist(1)                             |
| except SyntaxError:            | 1 iso (1,2)                                     |
|                                | break continue utilisé en dehors d'une loop     |
|                                | print(varsansquote) si on oublie ""             |
| except KeyboardInterrupt:      | après un Ctrl-c                                 |
| except:                        | *doit* être en dernier sinon SyntaxError        |
|--------------------------------+-------------------------------------------------|
| try:                           |                                                 |
| except (ValueError,TypeError): | si plusieurs exception *parenthèse obligatoire* |
|--------------------------------+-------------------------------------------------|
| façon de débugguer             | utiliser un debugger                            |
|                                | print()                                         |
|                                | parler de son code "rubber duck debugging"      |
|                                | isoler le problème                              |
|                                | faire un break                                  |
|--------------------------------+-------------------------------------------------|
| module unittest                | tests unitaires                                 |
|                                |                                                 |

