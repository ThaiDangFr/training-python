#+OPTIONS: toc:nil num:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [8pt,a4paper]


#+TITLE: Python essential 1 sur skillforall.com

* Introduction to python and computer programming
| language                        | alphabet + lexis + syntax + semantics                                        |
| IL                              | instruction list = langage machine                                           |
| high level programming language | pont entre humain et langage machine                                         |
| compilation                     | transforme le code source en langage machine                                 |
| interpretation                  | traduit à la volée                                                           |
| python                          | langage interprété avec un interpréteur obligatoire aka "scripting language" |
| PSF                             | python software foundation                                                   |



| compilation                             | vs | interpretation                                        |
|-----------------------------------------+----+-------------------------------------------------------|
| exec + rapide                           |    | le code source peut être exécuté plus tôt             |
| enduser n'a pas besoin du compilateur   |    | le code source est utilisable sur différents hardware |
| langage machine obfusque le code source |    |                                                       |
|-----------------------------------------+----+-------------------------------------------------------|
| compilation prend du temps              |    | exec - rapide                                         |
| compilateur dépend du hardware          |    | enduser a besoin de l'interpréteur                    |



| CPython     | Implémentation par PSF de Python écrit en C                                |
| Cython      | converti du Python en langage C pour des programmes liés aux mathématiques |
| Jython      | implémentation de Python en Java                                           |
| MicroPython | implémentation de Python optimisé pour les microcontrolleurs               |

| IDLE     | Integrated Development and Learning Environment ~ lance une console en Python |
| Python 3 | non compatible avec Python 2                                                  |


* Python data types, variables, operators and basic IO operations

** python literals

| provenance des functions               | built-in python                                                           |
|                                        | modules                                                                   |
|                                        | écrit par soi                                                             |
|----------------------------------------+---------------------------------------------------------------------------|
| function call (ou function invocation) | vérif le nom de la fonction                                               |
|                                        | vérif le nb d'arguments                                                   |
|                                        | rentre dans la function et exécute                                        |
|                                        | retourne dans le programme principal                                      |
|----------------------------------------+---------------------------------------------------------------------------|
| une seule instruction par ligne        | pas possible d'en mettre plusieurs                                        |
|----------------------------------------+---------------------------------------------------------------------------|
| arguments                              | positional ~ suit un ordre                                                |
|                                        | keyword ~ ex. mafunc(a=1, b=2) !! keyword doit être placé à la fin si mix |
|----------------------------------------+---------------------------------------------------------------------------|
| 69 built-in function ds python 3       | https://docs.python.org/3/library/functions.html                          |
|----------------------------------------+---------------------------------------------------------------------------|
| string                                 | délimité par double ou simple quotes                                      |
| backslash \                            | le prochain caractère a une signification spéciale ex. \n ou \\           |
|----------------------------------------+---------------------------------------------------------------------------|
| binaire                                | prefix 0b ou 0B  (ex. 0b10011011)                                         |
| octal                                  | prefix 0o ou 0O  (ex. 0o123)                                              |
| hexadecimal                            | prefix 0x ou 0X  (ex. 0x123)                                              |
|----------------------------------------+---------------------------------------------------------------------------|
| .4                                     | 0.4                                                                       |
| 4.                                     | 4.0                                                                       |
|----------------------------------------+---------------------------------------------------------------------------|
| int                                    | 4                                                                         |
| float                                  | 4.0                                                                       |
|                                        | 3E8 ~ 3 fois 10 exposant 8 = donne un float                               |
| bool                                   | True ou False                                                             |
| constante de planck                    | 6.62607E-34                                                               |
|----------------------------------------+---------------------------------------------------------------------------|
| True > False                           | True car True=1 et False=0                                                |
| True + False                           | 1                                                                         |
| True/False                             | ZeroDivisionError                                                         |
|----------------------------------------+---------------------------------------------------------------------------|
| literal                                | valeur fixe ex. 123 ou "123"                                              |
|                                        | None (class NoneType) ~ absence de valeur                                 |
|----------------------------------------+---------------------------------------------------------------------------|
| convertir binaire en décimal           | 1   0   0  1 1 0 1 1                                                      |
|                                        | 128 64 32 16 8 4 2 1                                                      |
|                                        | -> on les multiplie puis additionne                                       |
|                                        | 128 + 16 + 8 + 2 + 1 = 155                                                |
|----------------------------------------+---------------------------------------------------------------------------|
| unary operator                         | un seul opérande ex. -1 ou +3                                             |
| binary operator                        | deux opérandes ex. 4 + 5                                                  |
| hiérarchie des opérateurs              | **                                                                        |
|                                        | + - unary operator                                                        |
|                                        | * / %                                                                     |
|                                        | + - binary operator                                                       |
| exponentiel **                         | le seul opérateur dont la priorité est par la droite                      |


#+begin_src python :session :results output
print("a", "b", "c")
print("hello", end=" ")
print("world")
print("a", "b", "c", sep="-")
print(int(0b10011011))
print("a", 6, '1', 2.0) # mix différent type possible
#+end_src

#+RESULTS:
: a b c
: hello world
: a-b-c
: 155
: a 6 1 2.0


** operators - data manipulation tools

|        |                                                                                 | résultat float si un des 2 est float           |
|        |                                                                                 | résultat int si les 2 sont int                 |
|--------+---------------------------------------------------------------------------------+------------------------------------------------|
| +      | plus                                                                            |                                                |
| -      | moins                                                                           |                                                |
| '*'    | fois                                                                            |                                                |
| //     | division et arrondi à l'entier le plus petit !! attention aux valeurs négatives | floor division                                 |
| %      | le reste (modulo)                                                               | remainder                                      |
| **     | puissance                                                                       |                                                |
| ** 0.5 | racine carré ~ x puissance 0.5                                                  |                                                |
|--------+---------------------------------------------------------------------------------+------------------------------------------------|
| '/'    | diviser                                                                         | exception à la règle : résultat toujours float |
|        |                                                                                 |                                                |


| ZeroDivisionError | x/0  |
|                   | x//0 |
|                   | x%0  |



| a % b % c   | (a % b) % c    | priorité gauche à droite                           | left sided binding  |
| a ** b ** c | a ** ( b ** c) | exception pour ** : priorité droite vers la gauche | right sided binding |




#+begin_src python :session :results output
print(6 // 4) # 1.5 arrondi à 1
print(-6 // 4) # -1.5 arrondi à -2
print(-6. // 4) # -1.5 arrondi à -2
print(12 % 4.5) # 12 - (4.5*2) = 3.0
#+end_src

#+RESULTS:
: 1
: -2
: -2.0
: 3.0


** priorité des opérateurs

| priorité 1 | **       |
| priorité 2 | -a       |
| priorité 3 | * / // % |
| priorité 4 | + -      |


#+begin_src python :session :results output
print(-3 ** 2) # - (3 ** 2) = -9
print(2 * 3 % 5) # (2*3) % 5 = 1
print((2 ** 4), (2 * 4.), (2 * 4))
print((-2 / 4), (2 / 4), (2 // 4), (-2 // 4))
print((2 % -4), (2 % 4), (2 ** 3 ** 2))
#+end_src

#+RESULTS:
: -9
: 1
: 16 8.0 8
: -0.5 0.5 0 -1
: -2 2 512

** exercice mental à faire pour vérifier la compréhension

formule du modulo
a % b = a - [a/n] * n
[x] représente le plus grand entier inférieur à x

2 % -4 = 2 - [-0.5]*(-4) = 2 - (-1)*(-4) = 2-4 = -2


| calcul      | résultat |
|-------------+----------|
| -3 ** 2     |       -9 |
| 2 * 3 % 5   |        1 |
| 2 * 4.      |      8.0 |
| 2 // 4      |        0 |
| -2 // 4     |       -1 |
| 2 ** 3 ** 2 |      512 |
| 4 / 2       |      2.0 |
| 4 // 2      |        2 |
| 3 % 4       |        3 |
| -1 % 4      |        3 |
| 2 % -4      |       -2 |
| 9 % 4 % 2   |        1 |




** variables

| variable                                    | [_a-ZA-Z][_a-ZA-Z0-9]* : ne commence pas par un chiffre et ne doit pas être un mot réservé de python |
|                                             | pas forcément latin, caractères spécifiques aux langues possibles (accents, russe, etc)              |
|                                             | créé et initié automatiquement quand on assigne une valeur                                           |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| typage dynamique                            | pas besoin de déclarer                                                                               |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| convention sur les vars et noms de fonction | mots lowercase séparé par _  ex. my_variable my_function                                             |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| mots réservés                               | True False None and or not in is                                                                     |
|                                             | from import as class with                                                                            |
|                                             | def if elif else try except finally while for break continue raise return pass yield                 |
|                                             | assert del global lambda nonlocal                                                                    |
|---------------------------------------------+------------------------------------------------------------------------------------------------------|
| print(var)                                  | NameError : on ne peut pas utiliser une variable qui n'a pas de valeur assignée                      |
|                                             |                                                                                                      |

** shortcut operator


|----------------------+---------------------------------|
| définition           |                                 |
| a ?= x               | a = a ? x                       |
|----------------------+---------------------------------|
| x *= 2               | x = x*2                         |
|----------------------+---------------------------------|
| a =+ 1               | éq. a = 1     attention piège ! |
| a += 1               | éq. a = a + 1                   |
|----------------------+---------------------------------|
| i += 2 * j           | i = i +  2 * j                  |
| var /= 2             | var = var / 2                   |
| rem %= 10            | rem = rem % 10                  |
| j -= (i + var + rem) | j = j - (i + var + rem)         |
| x **= 2              | x = x ** 2                      |



#+begin_src python :session :results output
x = 1
x = float(x)
y = 3*x**3 - 2*x**2 + 3*x - 1
print(y)
#+end_src

#+RESULTS:
: 3.0

** interaction with the user

| x = input()              | lit une entrée utilisateur via la console et retourne un **str** |
| x = input("Votre age: ") | avec un prompt                                                   |
|--------------------------+------------------------------------------------------------------|
| float(x)                 | converti en float un str                                         |
| int(x)                   | converti en int un str                                           |
| str(x)                   | converti en str                                                  |

** string operators

| "a" + "b"            | "ab"  | concatenation |
| "a" * 3   ou 3 * "a" | "aaa" | replication   |

** conversion minutes en heure
| 5000 minutes | heures = 5000 // 60 = 83h |
|              | minutes = 5000 % 60 = 20m |


* boolean values, conditional execution, loops, lists and list processing, logical and bitwise operations
** operators
| a = 3   | assignment                      |
| a == b  | equal to, retourne True / False |
| 2 == 2. | True                            |
| !=      | not equal to, True False        |
| >       | greater than                    |
| >=      | greater than or equal to        |
| <       | less than                       |
| <=      | less than or equal to           |

** table des priorités

| priority | operator                          |        |
|        1 | ~ + -                             | unary  |
|        2 | **                                |        |
|        3 | * / // %                          |        |
|        4 | + -                               | binary |
|        5 | << >>                             |        |
|        6 | < <= > >=                         |        |
|        7 | == !=                             |        |
|        8 | &                                 |        |
|        9 | ¦ (pipe)                          |        |
|       10 | = += -= *= /= %= &= ^= ¦= >>= <<= |        |

** statements

| indentation               | recommendation est d'utiliser 4 espaces              |
|---------------------------+------------------------------------------------------|
| if xxx:                   |                                                      |
| elif yyy:                 |                                                      |
| else:                     | optionnel mais toujours en dernier sinon SyntaxError |
|---------------------------+------------------------------------------------------|
| while xxx:                |                                                      |
| else:                     | else exécuté en dernier                              |
|---------------------------+------------------------------------------------------|
| for xxx:                  |                                                      |
| else:                     | else exécuté en dernier                              |
|---------------------------+------------------------------------------------------|
| for i in range(100):      | 0 à 99                                               |
| for i in range(2,8):      | 2 3 4 5 6 7                                          |
| for i in range(2,8,3):    | 2 5     (début, fin, incrément)                      |
| for i in range(6, 1, -2): | 6 4 2                                                |
| break                     | met fin à la boucle while ou for                     |
| continue                  | ~ va à la fin du body de la boucle while ou for      |
|---------------------------+------------------------------------------------------|
| KeyboardInterrupt         | suite à Ctrl-C pour sortir d'une boucle infinie      |
| bool(0)                   | False                                                |
| bool(4)                   | True                                                 |
| list(range(1,1))          | []                                                   |
| list(range(2,1)           | []                                                   |
|---------------------------+------------------------------------------------------|
| if x != 0:                | if x:                                                |
| while x !=0:              | while x:                                             |
|---------------------------+------------------------------------------------------|
| i % 2 == 0                | even (pair)                                          |
| i % 2 != 0                | odd (impair)                                         |



#+begin_src python :session :results output
"""
différente façon pour if
"""

# avec indentation
if True:
    print(True)
else:
    print(False)

# sans indentation    
if True: print(True)
else: print(False)
#+end_src

#+RESULTS:
: True
: True

** builtin function
| max(**args)  |                    |
| min(**args)  |                    |
| round(x,0)   | arrondi à 0        |
| range(x,y,z) | x int de début     |
|              | y int de fin       |
|              | z int de incrément |
|              |                    |

#+begin_src python :session :results output
year = int("1996")

if year < 1582:
    print("Not within the Gregorian calendar period")
else:
    if year % 4 != 0:
        print("Common year")
    elif year % 100 != 0:
        print("Leap year")
    elif year % 400 != 0:
        print("Common year")
    else:
        print("Leap year")
#+end_src

#+RESULTS:
: Leap year


#+begin_src python :session :results output
"""
else dans les boucles
"""
n = 0
while n != 3:
    print(n)
    n += 1
else:
    print(n, "else")
 
print()
 
for i in range(0, 3):
    print(i)
else:
    print(i, "else")
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3 else
: 
: 0
: 1
: 2
: 2 else

** logic and bit operations



| bool(0)          | False               |                 |
| bool(1 ou autre) | True                |                 |
|------------------+---------------------+-----------------|
| a and b          | bool                | x               |
| a or b           | bool                | +               |
| not a            | bool                |                 |
|------------------+---------------------+-----------------|
| &                | bitwise and         | x               |
| ¦ (pipe)         | bitwise or          | +               |
| ^                | bitwise xor         | -               |
| ~                | bitwise not         |                 |
| >>               | bitwise right shift |                 |
| <<               | bitwise left shift  |                 |
|------------------+---------------------+-----------------|
| x &= y           | x = x & y           |                 |
| x ¦= y           | x = x ¦ y           |                 |
| x ^= y           | x = x ^ y           |                 |
|------------------+---------------------+-----------------|
| not (a and b)    | (not a) or (not b)  | (de Morgan law) |
| not (a or b)     | (not a) and (not b) | (de Morgan law) |
|------------------+---------------------+-----------------|




# calcul de 6^5 = 3
# attention : entier seulement pas float !

| décimal | 16 | 8 | 4 | 2 | 1 |
|---------+----+---+---+---+---|
|       6 |  0 | 0 | 1 | 1 | 0 |
|---------+----+---+---+---+---|
|       ^ |    |   |   |   |   |
|---------+----+---+---+---+---|
|       5 |  0 | 0 | 1 | 0 | 1 |
|---------+----+---+---+---+---|
|---------+----+---+---+---+---|
|       3 |  0 | 0 | 0 | 1 | 1 |

# addition binaire : 1 + 1 = 0 avec une retenue de 1

| décimal | 16 | 8 | 4 | 2 | 1 |
|---------+----+---+---+---+---|
|       6 |  0 | 0 | 1 | 1 | 0 |
|---------+----+---+---+---+---|
|       + |    |   |   |   |   |
|---------+----+---+---+---+---|
|       5 |  0 | 0 | 1 | 0 | 1 |
|---------+----+---+---+---+---|
|---------+----+---+---+---+---|
|      11 |  0 | 1 | 0 | 1 | 1 |


# avancé
| x & 1 = x  |
| x & 0 = 0  |
| x ¦ 1 = 1  |
| x ¦ 0 = x  |
| x ^ 1 = ~x |
| x ^ 0 = x  |

** shift bits

| a >> 1  | a // 2 |                                   |
| a >> 2  | a // 4 |                                   |
|---------+--------+-----------------------------------|
| a << 1  | a * 2  |                                   |
| a << 1  | a * 4  |                                   |
|---------+--------+-----------------------------------|
| 17 >> 1 | 8      | 1 décalage binaire vers la droite |
| 17 << 2 | 68     | 2 décalage binaire vers la gauche |


| opération | 64 | 32 | 16 | 8 | 4 | 2 | 1 | décimal |
|-----------+----+----+----+---+---+---+---+---------|
|           |    |    |  1 | 0 | 0 | 0 | 1 |      17 |
|-----------+----+----+----+---+---+---+---+---------|
| >> 1      |    |    |  0 | 1 | 0 | 0 | 0 |       8 |
| << 2      |  1 |  0 |  0 | 0 | 1 | 0 | 0 |      68 |
|-----------+----+----+----+---+---+---+---+---------|

** calcul de ~

# ~17 = 238 (= 255-17)

| opération | 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 |               décimal |                                                              |
|-----------+-----+----+----+----+---+---+---+---+-----------------------+--------------------------------------------------------------|
|           |   0 |  0 |  0 |  1 | 0 | 0 | 0 | 1 |                    17 |                                                              |
|-----------+-----+----+----+----+---+---+---+---+-----------------------+--------------------------------------------------------------|
| not       |   1 |  1 |  1 |  0 | 1 | 1 | 1 | 0 |                   238 | intermediate result                                          |



# dans une représentation complément à 2 (le bit le plus à gauche est négatif si bit==1)

| opération | 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | décimal         |                               |
|-----------+-----+----+----+----+---+---+---+---+-----------------+-------------------------------|
|           |     |    |  0 |  1 | 0 | 0 | 0 | 1 | 17              |                               |
|-----------+-----+----+----+----+---+---+---+---+-----------------+-------------------------------|
|           |     |    |  1 |  0 | 1 | 1 | 1 | 0 | -32+8+4+2 = -18 | représentation complément à 2 |
|           |     |    |    |    |   |   |   |   |                 |                               |


** calcul mental
| 4 & 1  | 100 & 001 = 000           |
| 4 ¦ 1  | 100 ¦ 001 = 101 = 5       |
| ~4     | 0100 -> 1011 -> -8+2+1=-5 |
| 4 ^ 5  | 100 ^ 101 = 001 = 1       |
| 4 >> 2 | 100 -> 001   -> 1         |
| 4 << 2 | 100 -> 10000 -> 16        |

